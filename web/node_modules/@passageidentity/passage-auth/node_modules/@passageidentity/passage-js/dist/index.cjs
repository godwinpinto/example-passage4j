"use strict";var Y=Object.create;var x=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Z=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var ee=(r,e)=>{for(var t in e)x(r,t,{get:e[t],enumerable:!0})},F=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of X(e))!E.call(r,s)&&s!==t&&x(r,s,{get:()=>e[s],enumerable:!(n=Q(e,s))||n.enumerable});return r};var J=(r,e,t)=>(t=r!=null?Y(Z(r)):{},F(e||!r||!r.__esModule?x(t,"default",{value:r,enumerable:!0}):t,r)),te=r=>F(x({},"__esModule",{value:!0}),r);var oe={};ee(oe,{Identifier:()=>$,Passage:()=>H,PassageError:()=>o,PassageErrorCode:()=>y,PassageUserStatus:()=>C,RequiredIdentifier:()=>W,User:()=>U,UserMetadataType:()=>z,WebAuthnType:()=>V});module.exports=te(oe);var p=class{encodeBytes(e){let n=btoa(String.fromCharCode(...new Uint8Array(e))).replace(/\+/g,"-").replace(/\//g,"_");return G(n)}decodeBytes(e){let t=e.replace(/-/g,"+").replace(/_/g,"/"),n=G(t);return Uint8Array.from(atob(n),l=>l.charCodeAt(0))}},G=r=>{let e=r.indexOf("=");return r.slice(0,e===-1?r.length:e)};var o=class extends Error{constructor(t,n){super();this.name="PassageError",this.statusCode=n.status,this.statusText=n.statusText,this.message=this._parsePsgErrorResponse(t)}_parsePsgErrorResponse(t){try{return t=JSON.parse(t),t.error?t.error:""}catch{return t}}},y=(i=>(i[i.MultipleChoice=300]="MultipleChoice",i[i.MovedPermanantly=301]="MovedPermanantly",i[i.Found=302]="Found",i[i.SeeOther=303]="SeeOther",i[i.NotModified=304]="NotModified",i[i.TemporaryRedirect=307]="TemporaryRedirect",i[i.PermanentRedirect=308]="PermanentRedirect",i[i.BadRequest=400]="BadRequest",i[i.Unauthorized=401]="Unauthorized",i[i.PaymentRequired=402]="PaymentRequired",i[i.Forbidden=403]="Forbidden",i[i.NotFound=404]="NotFound",i[i.MethodNotAllowed=405]="MethodNotAllowed",i[i.NotAcceptable=406]="NotAcceptable",i[i.ProxyAuthenticationRequired=407]="ProxyAuthenticationRequired",i[i.RequestTimeout=408]="RequestTimeout",i[i.Conflict=409]="Conflict",i[i.Gone=410]="Gone",i[i.LengthRequired=411]="LengthRequired",i[i.PreconditionFailed=412]="PreconditionFailed",i[i.PayloadTooLarge=413]="PayloadTooLarge",i[i.URITooLong=414]="URITooLong",i[i.UnsupportedMediaType=415]="UnsupportedMediaType",i[i.RangeNotSatisfiable=416]="RangeNotSatisfiable",i[i.ExpectationFailed=417]="ExpectationFailed",i[i.MisdirectedRequest=421]="MisdirectedRequest",i[i.UnprocessableEntity=422]="UnprocessableEntity",i[i.Locked=423]="Locked",i[i.FailedDependency=424]="FailedDependency",i[i.TooEarly=425]="TooEarly",i[i.UpgradeRequired=426]="UpgradeRequired",i[i.PreconditionRequired=428]="PreconditionRequired",i[i.TooManyRequests=429]="TooManyRequests",i[i.RequestHeaderFieldsTooLarge=431]="RequestHeaderFieldsTooLarge",i[i.UnavailableForLegalReasons=451]="UnavailableForLegalReasons",i[i.InternalServerError=500]="InternalServerError",i[i.NotImplemented=501]="NotImplemented",i[i.BadGateway=502]="BadGateway",i[i.ServiceUnavailable=503]="ServiceUnavailable",i[i.GatewayTimeout=504]="GatewayTimeout",i[i.HTTPVersionNotSupported=505]="HTTPVersionNotSupported",i[i.VariantAlsoNegotiates=506]="VariantAlsoNegotiates",i[i.InsufficientStorage=507]="InsufficientStorage",i[i.LoopDetected=508]="LoopDetected",i[i.NotExtended=510]="NotExtended",i[i.NetworkAuthenticationRequired=511]="NetworkAuthenticationRequired",i[i.PSGCredObjectDoesNotExist=700]="PSGCredObjectDoesNotExist",i[i.PSGParsePublicKeyForNewDeviceFailed=701]="PSGParsePublicKeyForNewDeviceFailed",i[i.PSGParsePublicKeyForLoginFailed=702]="PSGParsePublicKeyForLoginFailed",i[i.PSGCouldNotGetUserCredential=703]="PSGCouldNotGetUserCredential",i[i.PSGLoginRequired=704]="PSGLoginRequired",i))(y||{});var O=new p,N=typeof window>"u",D=r=>`Failed to access localStorage. ${r} must be run client-side.`,d=class{_isLocalHost(){return Boolean(window.location.hostname==="localhost"||window.location.hostname==="[::1]"||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/))}_isHttps(){return location.protocol==="https:"}setAuthToken(e){localStorage.setItem("psg_auth_token",e);let t=!this._isHttps()&&this._isLocalHost();document.cookie=`psg_auth_token = ${e}; path=/ ${t?"":";secure"}`}deleteAuthToken(){localStorage.removeItem("psg_auth_token"),document.cookie="psg_auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC;"}async psgCredIDExists(e){let t=e.user.id,n=e.handshake.challenge.publicKey.allowCredentials,s=localStorage.getItem("psg_cred_obj");if(!s)throw new o("Could not get psg_cred_obj",{status:700,statusText:"PSG Cred Object Does Not Exist"});let l=JSON.parse(s)[t];return n.find(P=>{if(O.encodeBytes(O.decodeBytes(P.id))===O.encodeBytes(O.decodeBytes(l)))return!0})}setPsgCredID(e,t){if(!t)throw new o("Could not get user's credential",{status:703,statusText:"PSG Could Not Get User Credential"});let n=localStorage.getItem("psg_cred_obj");if(n){let s=JSON.parse(n);s[e]=t==null?void 0:t.id,localStorage.setItem("psg_cred_obj",JSON.stringify(s))}else localStorage.setItem("psg_cred_obj",JSON.stringify({[e]:t==null?void 0:t.id}))}setRefreshToken(e){if(e){if(N){console.warn(D("setRefreshToken"));return}localStorage.setItem("psg_refresh_token",e)}}getRefreshToken(){return N?(console.warn(D("getRefreshToken")),null):localStorage.getItem("psg_refresh_token")}deleteRefreshToken(){if(N){console.warn(D("deleteRefreshToken"));return}localStorage.removeItem("psg_refresh_token")}};var q=J(require("ua-parser-js"),1),m=class{constructor(){this.userAgent=new q.default}async getBrowserInfo(){return{createPassKeySupported:await this._canBrowserCreatePassKey(),getPassKeySupported:await this._canBrowserGetPasskey(),conditionalUISupported:await this._isConditionalMediationAvailable()}}async _canBrowserCreatePassKey(){return!!(this._isiOSPasskeySupported()||this._isMacPasskeySupported())}_canBrowserGetPasskey(){return this._canBrowserCreatePassKey()}async _isConditionalMediationAvailable(){return!1}_isiOSPasskeySupported(){return this.userAgent.getOS().name=="iOS"&&parseFloat(this.userAgent.getOS().version||"")>=16}_isMacPasskeySupported(){return this.userAgent.getBrowser().name=="Safari"&&parseFloat(this.userAgent.getBrowser().version||"")>=16&&this.userAgent.getOS().name=="Mac OS"}_isChrome107(){return this.userAgent.getBrowser().name=="Chrome"&&parseFloat(this.userAgent.getBrowser().version||"")>=107}};async function u(r){return r.ok?r.json():await r.text().then(e=>{throw new o(e,r)})}var ne=new d,ie=r=>typeof r=="object"&&r!==null&&typeof r.auth_result<"u";function w(r){if(!ie(r))return console.warn("Not a valid auth response"),r;let e=r.auth_result.refresh_token;return e&&ne.setRefreshToken(e),r}function L(){let r=navigator.userAgent.toLowerCase().indexOf("firefox")>-1,e=window.navigator.userAgent.match(/Firefox\/([0-9]+)\./),t=e?parseInt(e[1]):0;return navigator.platform.indexOf("Win")!==-1&&r&&t===98}function I(r){let e=new Uint8Array(68);e.set(r.slice(0,68));let t=new Uint8Array(r.byteLength-68);t.set(r.slice(68,r.byteLength));let n=new Uint8Array(15),s=new Uint8Array(e.byteLength+n.byteLength+t.byteLength);s.set(e,0),s.set(n,e.byteLength),s.set(t,e.byteLength+n.byteLength);let l=s[30]+15;return s.set([l],30),s}var K={URL:"https://auth.passage.id",version:"@passageidentity/passage-js 2.6.3"};var _=K;function a(r){let e=new Headers(r),t=_.version;return t&&e.append("Passage-Version",t),e}var S=new p,se=new d,re=new m,R=class{constructor(e,t){this.apiUrl=e+"/register/",this.identifier=t}async withWebAuthn(){let{createPassKeySupported:e}=await re.getBrowserInfo(),t=await fetch(this.apiUrl+"webauthn/start",{headers:a(),body:JSON.stringify({identifier:this.identifier}),method:"POST"}).then(u),n=await navigator.credentials.create({publicKey:this._parsePublicKey(t.handshake.challenge.publicKey)}).catch(P=>{throw new o("error parsing public key for webAuthn",{status:702,statusText:"PSG Parse Public Key For Login Failed"})}).then(P=>P),s=new Uint8Array(n==null?void 0:n.response.attestationObject);L()&&(s=I(s));let l=t.user.id,c=await fetch(this.apiUrl+"webauthn/finish",{headers:a(),method:"POST",body:JSON.stringify({user_id:l,handshake_id:t.handshake.id,handshake_response:{rawId:S.encodeBytes(n==null?void 0:n.rawId),id:n==null?void 0:n.id,type:n==null?void 0:n.type,response:{attestationObject:S.encodeBytes(s),clientDataJSON:S.encodeBytes(n==null?void 0:n.response.clientDataJSON)}},cred_type:e?"passkey":"platform"})}).then(u).then(w);return se.setPsgCredID(l,n),c.auth_result}_parsePublicKey(e){return e.challenge=S.decodeBytes(e.challenge.toString()),e.user.id=S.decodeBytes(e.user.id.toString()),e}};var k=new p,A=class{constructor(e,t){this.apiUrl=e+"/login/",this.identifier=t!=null?t:""}async withWebAuthn(){let e=JSON.stringify({identifier:this.identifier}),t=this.identifier?e:void 0,n=await fetch(this.apiUrl+"webauthn/start",{headers:a(),method:"POST",body:t}).then(u),s=await navigator.credentials.get({publicKey:this._parsePublicKey(n.handshake.challenge.publicKey)}).catch(c=>{throw new o("error parsing public key for webAuthn",{status:702,statusText:"PSG Parse Public Key For Login Failed"})}).then(c=>c);return s?(await fetch(this.apiUrl+"webauthn/finish",{headers:a(),method:"POST",body:JSON.stringify({user_id:this.identifier?n.user.id:void 0,handshake_id:n.handshake.id,handshake_response:{id:s.id,rawId:k.encodeBytes(s.rawId),type:s.type,response:{clientDataJSON:k.encodeBytes(s.response.clientDataJSON),authenticatorData:k.encodeBytes(s.response.authenticatorData),signature:k.encodeBytes(s.response.signature),userHandle:k.encodeBytes(s.response.userHandle)}}})}).then(u).then(w)).auth_result:{auth_token:"",redirect_url:""}}_parsePublicKey(e){if(e.challenge=Uint8Array.from(atob(e.challenge.toString()),t=>t.charCodeAt(0)),e.allowCredentials){for(let t=0;t<e.allowCredentials.length;t++){let n=e.allowCredentials[t];n.id=k.decodeBytes(n.id.toString())}return e}return e}};var T=class{constructor(e){this.apiUrl=e}async appInfo(){return(await fetch(this.apiUrl,{headers:a(),method:"GET"}).then(u)).app}async identifierExists(e){return(await fetch(this.apiUrl+"/users?identifier="+encodeURIComponent(e),{headers:a(),method:"GET"}).then(u)).user}};var g=new p,j=new d,f=class{constructor(e){this.apiUrl=e}async newRegister(e,t){return(await fetch(this.apiUrl+"/register/magic-link",{headers:a(),method:"POST",body:JSON.stringify({identifier:e,magic_link_path:window.location.pathname,language:t})}).then(u)).magic_link}async newLogin(e,t){return(await fetch(this.apiUrl+"/login/magic-link",{headers:a(),method:"POST",body:JSON.stringify({identifier:e,magic_link_path:window.location.pathname,language:t})}).then(u)).magic_link}async getStatus(e){return(await fetch(this.apiUrl+"/magic-link/status",{headers:a(),method:"POST",body:JSON.stringify({id:e})}).then(u).then(w)).auth_result}async activate(e){return(await fetch(this.apiUrl+"/magic-link/activate",{headers:a(),method:"PATCH",body:JSON.stringify({magic_link:e})}).then(u).then(w)).auth_result}async activateWebAuthnLogin(e){let t=await fetch(this.apiUrl+"/magic-link/webauthn/login/start",{headers:a(),body:JSON.stringify({magic_link:e}),method:"POST"}).then(u);if(!await j.psgCredIDExists(t))throw new o("psg_cred_obj does not exist in the allow list",{status:700,statusText:"Not Found"});let s=await navigator.credentials.get({publicKey:this._parsePublicKeyLogin(t.handshake.challenge.publicKey)}).catch(c=>{throw new o("could not parse publickey for login",{status:702,statusText:"PSG Parse Public Key For Login Failed"})});return s?(await fetch(this.apiUrl+"/magic-link/webauthn/login/finish",{headers:a(),method:"POST",body:JSON.stringify({magic_link:e,user_id:t.user.id,handshake_id:t.handshake.id,handshake_response:{id:s.id,rawId:g.encodeBytes(s.rawId),type:s.type,response:{clientDataJSON:g.encodeBytes(s.response.clientDataJSON),authenticatorData:g.encodeBytes(s.response.authenticatorData),signature:g.encodeBytes(s.response.signature),userHandle:g.encodeBytes(s.response.userHandle)}}})}).then(u).then(w)).auth_result:{auth_token:"",redirect_url:""}}async activateWebAuthnNewDevice(e){let t=await fetch(this.apiUrl+"/magic-link/webauthn/new/start",{headers:a(),body:JSON.stringify({magic_link:e}),method:"POST"}).then(u),n=await navigator.credentials.create({publicKey:this._parsePublicKeyNewDevice(t.handshake.challenge.publicKey)}).catch(P=>{throw new o("could not parse public key for new device",{status:701,statusText:"PSG Parse Public Key For New Device Failed"})}),s=new Uint8Array(n==null?void 0:n.response.attestationObject);L()&&(s=I(s));let l=await fetch(this.apiUrl+"/magic-link/webauthn/new/finish",{headers:a(),method:"POST",body:JSON.stringify({magic_link:e,user_id:t.user.id,handshake_id:t.handshake.id,handshake_response:{rawId:g.encodeBytes(n.rawId),id:n.id,type:n.type,response:{attestationObject:g.encodeBytes(s),clientDataJSON:g.encodeBytes(n.response.clientDataJSON)}},device_name:navigator.userAgent})}).then(u).then(w),c=t.user.id;return j.setPsgCredID(c,n),l.auth_result}_parsePublicKeyLogin(e){if(e.challenge=Uint8Array.from(atob(e.challenge.toString()),t=>t.charCodeAt(0)),e.allowCredentials){for(let t=0;t<e.allowCredentials.length;t++){let n=e.allowCredentials[t];n.id=g.decodeBytes(n.id.toString())}return e}return e}_parsePublicKeyNewDevice(e){return e.challenge=g.decodeBytes(e.challenge.toString()),e.user.id=g.decodeBytes(e.user.id.toString()),e}};var B=J(require("jwt-decode"),1);var v=new p,b=new d,ae=new m,U=class{constructor(e){this.userID="",this._iss="",this.authToken=e,this._useLocalStorage=typeof e>"u",this.authGuard(),this._apiVersion="v1";try{new URL(this._iss),this._appEndpoint=`${this._iss}`}catch{this._appEndpoint=`${_.URL}/${this._apiVersion}/apps/${this._iss}`}this._currentUserEndpoint=`${this._appEndpoint}/currentuser`}_getAuthToken(){if(!this._useLocalStorage&&this.authToken!==void 0&&this.authToken!=="")return this.authToken;if(typeof window>"u")return console.warn("PassageUser is failed to access localStorage. This function must be run client-side or be provided an authToken JWT."),"";let e=localStorage.getItem("psg_auth_token");return e||""}_validJWTPayload(e){let t=["exp","iss","sub"],n=Math.floor(Date.now()/1e3);return t.forEach(s=>{if(!(s in e))return!1}),!(e.exp&&n>e.exp)}_validJWTHeader(e){let t={alg:"RS256",typ:"JWT"};return!(e.alg!==t.alg||e.typ!==t.typ)}authGuard(){let e=this._getAuthToken();try{let t=(0,B.default)(e,{header:!0}),n=(0,B.default)(e);return!!(n!==void 0&&t!==void 0&&(this.userID=n.sub,this._iss=n.iss,this._validJWTPayload(n)&&this._validJWTHeader(t)))}catch{return!1}}async userInfo(){return this.authGuard()?(await fetch(this._currentUserEndpoint,{method:"GET",headers:a({Authorization:`Bearer ${this._getAuthToken()}`})}).then(async t=>t.status!==200?void 0:await t.json()).catch(t=>{throw new o("Failed to fetch current user.",{status:404,statusText:"Not Found"})})).user:void 0}async changeEmail(e,t){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});return(await fetch(`${this._currentUserEndpoint}/email`,{method:"PATCH",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"}),body:JSON.stringify({new_email:e,language:t})}).then(u)).magic_link}async changePhone(e,t){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});return(await fetch(`${this._currentUserEndpoint}/phone`,{method:"PATCH",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"}),body:JSON.stringify({new_phone:e,language:t})}).then(u)).magic_link}async editDevice(e,t){if(!this.authGuard())throw new o("Current user is not authorized.",{status:409,statusText:"Conflict"});if(e===""||e===void 0)throw new o("A deviceID is required for an edit device request.",{status:400,statusText:"Bad Request"});if(Object.keys(t).length===0)throw new o("Edit device request must not have an empty request body.",{status:400,statusText:"Bad Request"});return(await fetch(`${this._currentUserEndpoint}/devices/${e}`,{method:"PATCH",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"}),body:JSON.stringify({...t})}).then(u)).device}async listDevices(){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});return(await fetch(`${this._currentUserEndpoint}/devices/`,{method:"GET",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"})}).then(u)).devices}async addDevice(){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});let{createPassKeySupported:e}=await ae.getBrowserInfo(),t=await fetch(this._currentUserEndpoint+"/devices/start",{headers:a({Authorization:`Bearer ${this._getAuthToken()}`}),method:"POST"}).then(u),n=await navigator.credentials.create({publicKey:this._parsePublicKey(t.handshake.challenge.publicKey)}).catch(c=>{throw new o("failed to parse public key",{status:701,statusText:"PSG Parse Public Key For New Device Failed"})}).then(c=>c),s=t.user.id,l=await fetch(this._currentUserEndpoint+"/devices/finish",{headers:a({Authorization:`Bearer ${this._getAuthToken()}`}),method:"POST",body:JSON.stringify({user_id:s,handshake_id:t.handshake.id,handshake_response:{rawId:v.encodeBytes(n==null?void 0:n.rawId),id:n==null?void 0:n.id,type:n==null?void 0:n.type,response:{attestationObject:v.encodeBytes(n==null?void 0:n.response.attestationObject),clientDataJSON:v.encodeBytes(n==null?void 0:n.response.clientDataJSON)}},cred_type:e?"passkey":"platform"})}).then(u);return b.setPsgCredID(s,n),l.device}async deleteDevice(e){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});if(!e)throw new o("A deviceID is required to delete a device.",{status:404,statusText:"Not Found"});let t=!1;return t=await fetch(`${this._currentUserEndpoint}/devices/${e}`,{method:"DELETE",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"})}).then(async n=>n.ok?!0:await n.text().then(s=>{throw new o(s,n)})),t}_parsePublicKey(e){return e.challenge=v.decodeBytes(e.challenge.toString()),e.user.id=v.decodeBytes(e.user.id.toString()),e}async getMetadata(){return this.authGuard()?(await fetch(`${this._currentUserEndpoint}/user-metadata`,{method:"GET",headers:a({Authorization:`Bearer ${this._getAuthToken()}`})}).then(u)).user_metadata:void 0}async updateMetadata(e){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});return(await fetch(`${this._currentUserEndpoint}/user-metadata`,{method:"PATCH",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"}),body:JSON.stringify({user_metadata:e})}).then(u)).user}async signOut(){b.deleteAuthToken();let e=b.getRefreshToken();return e?fetch(`${this._appEndpoint}/tokens/?`+new URLSearchParams({refresh_token:e}),{method:"DELETE"}).then(({status:t})=>t===200).finally(()=>{b.deleteRefreshToken()}):!0}async getAuthToken(){let e=this._getAuthToken(),t=(0,B.default)(e);return t!==void 0&&this._validJWTPayload(t)?Promise.resolve(e):this.refresh()}async refresh(){let e=new o("Login required",{status:704,statusText:"Login required"}),t=b.getRefreshToken();return t?fetch(`${this._appEndpoint}/tokens/`,{headers:a(),method:"POST",body:JSON.stringify({refresh_token:t})}).then(u).then(n=>{b.setRefreshToken(n.auth_result.refresh_token);let s=n.auth_result.auth_token;return this._useLocalStorage?b.setAuthToken(s):this.authToken=s,s}).catch(()=>{throw e}):Promise.reject(e)}};var M=async(r,e)=>{let t,n=new Promise(s=>{t=setTimeout(s,e)});return Promise.race([r,n]).then(s=>(clearTimeout(t),s))};var H=class{constructor(e){this.appID=e,this.baseUrl=_.URL,this.apiVersion="v1",this.fullUrl=`${this.baseUrl}/${this.apiVersion}/apps/${this.appID}`}credIDExists(e){let t=localStorage.getItem("psg_cred_obj");return t?!!JSON.parse(t)[e]:!1}setAuthToken(e){new d().setAuthToken(e)}signOut(){console.warn("Passage.signOut is deprecated and will be removed in a future version. Use User.signOut instead."),new d().deleteAuthToken()}async register(e){return await new R(this.fullUrl,e).withWebAuthn()}async login(e){return await new A(this.fullUrl,e).withWebAuthn()}async appInfo(){return await new T(this.fullUrl).appInfo()}async browserInfo(){return await new m().getBrowserInfo()}checkWebauthnConfig(e){let t=!0;return e.auth_origin.replace(/\/$/,"")!=window.location.origin.replace(/\/$/,"")&&(console.error('The auth_origin configured for webauthn in your app settings does not match the "origin" of your current URL.  Please reconfigure this in the admin console. (Your current "origin" is `'+window.location.origin+"`) Passage will continue to work with other authentication methods."),t=!1),t}async isWebauthnSupported(e){let t=!1;return window.PublicKeyCredential&&(e?t=!0:await M(window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then(n=>{t=n}).catch(()=>console.log("Something went wrong.")),150)),t}async identifierExists(e){return await new T(this.fullUrl).identifierExists(e)}async newRegisterMagicLink(e,t){return await new f(this.fullUrl).newRegister(e,t)}async newLoginMagicLink(e,t){return await new f(this.fullUrl).newLogin(e,t)}async magicLinkActivate(e){return await new f(this.fullUrl).activate(e)}async magicLinkActivateWebAuthnLogin(e){return await new f(this.fullUrl).activateWebAuthnLogin(e)}async magicLinkActivateWebAuthnNewDevice(e){return await new f(this.fullUrl).activateWebAuthnNewDevice(e)}async getMagicLinkStatus(e){return await new f(this.fullUrl).getStatus(e)}getCurrentUser(e){return new U(e)}async createUser(e){return(await fetch(`${this.fullUrl}/users`,{headers:a(),body:JSON.stringify({...e}),method:"POST"}).then(u)).user}};var $=(n=>(n.email="email",n.phone="phone",n.both="both",n))($||{}),W=(s=>(s.Phone="phone",s.Email="email",s.Both="both",s.Either="either",s))(W||{}),z=(c=>(c.STRING="string",c.BOOLEAN="boolean",c.INTEGER="integer",c.DATE="date",c.PHONE="phone",c.EMAIL="email",c))(z||{});var C=(n=>(n.ACTIVE="active",n.INACTIVE="inactive",n.PENDING="pending",n))(C||{}),V=(t=>(t.Platform="platform",t.Passkey="passkey",t))(V||{});0&&(module.exports={Identifier,Passage,PassageError,PassageErrorCode,PassageUserStatus,RequiredIdentifier,User,UserMetadataType,WebAuthnType});
