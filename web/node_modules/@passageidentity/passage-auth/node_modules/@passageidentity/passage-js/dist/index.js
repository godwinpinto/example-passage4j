var g=class{encodeBytes(e){let n=btoa(String.fromCharCode(...new Uint8Array(e))).replace(/\+/g,"-").replace(/\//g,"_");return H(n)}decodeBytes(e){let t=e.replace(/-/g,"+").replace(/_/g,"/"),n=H(t);return Uint8Array.from(atob(n),d=>d.charCodeAt(0))}},H=r=>{let e=r.indexOf("=");return r.slice(0,e===-1?r.length:e)};var o=class extends Error{constructor(t,n){super();this.name="PassageError",this.statusCode=n.status,this.statusText=n.statusText,this.message=this._parsePsgErrorResponse(t)}_parsePsgErrorResponse(t){try{return t=JSON.parse(t),t.error?t.error:""}catch{return t}}},_=(i=>(i[i.MultipleChoice=300]="MultipleChoice",i[i.MovedPermanantly=301]="MovedPermanantly",i[i.Found=302]="Found",i[i.SeeOther=303]="SeeOther",i[i.NotModified=304]="NotModified",i[i.TemporaryRedirect=307]="TemporaryRedirect",i[i.PermanentRedirect=308]="PermanentRedirect",i[i.BadRequest=400]="BadRequest",i[i.Unauthorized=401]="Unauthorized",i[i.PaymentRequired=402]="PaymentRequired",i[i.Forbidden=403]="Forbidden",i[i.NotFound=404]="NotFound",i[i.MethodNotAllowed=405]="MethodNotAllowed",i[i.NotAcceptable=406]="NotAcceptable",i[i.ProxyAuthenticationRequired=407]="ProxyAuthenticationRequired",i[i.RequestTimeout=408]="RequestTimeout",i[i.Conflict=409]="Conflict",i[i.Gone=410]="Gone",i[i.LengthRequired=411]="LengthRequired",i[i.PreconditionFailed=412]="PreconditionFailed",i[i.PayloadTooLarge=413]="PayloadTooLarge",i[i.URITooLong=414]="URITooLong",i[i.UnsupportedMediaType=415]="UnsupportedMediaType",i[i.RangeNotSatisfiable=416]="RangeNotSatisfiable",i[i.ExpectationFailed=417]="ExpectationFailed",i[i.MisdirectedRequest=421]="MisdirectedRequest",i[i.UnprocessableEntity=422]="UnprocessableEntity",i[i.Locked=423]="Locked",i[i.FailedDependency=424]="FailedDependency",i[i.TooEarly=425]="TooEarly",i[i.UpgradeRequired=426]="UpgradeRequired",i[i.PreconditionRequired=428]="PreconditionRequired",i[i.TooManyRequests=429]="TooManyRequests",i[i.RequestHeaderFieldsTooLarge=431]="RequestHeaderFieldsTooLarge",i[i.UnavailableForLegalReasons=451]="UnavailableForLegalReasons",i[i.InternalServerError=500]="InternalServerError",i[i.NotImplemented=501]="NotImplemented",i[i.BadGateway=502]="BadGateway",i[i.ServiceUnavailable=503]="ServiceUnavailable",i[i.GatewayTimeout=504]="GatewayTimeout",i[i.HTTPVersionNotSupported=505]="HTTPVersionNotSupported",i[i.VariantAlsoNegotiates=506]="VariantAlsoNegotiates",i[i.InsufficientStorage=507]="InsufficientStorage",i[i.LoopDetected=508]="LoopDetected",i[i.NotExtended=510]="NotExtended",i[i.NetworkAuthenticationRequired=511]="NetworkAuthenticationRequired",i[i.PSGCredObjectDoesNotExist=700]="PSGCredObjectDoesNotExist",i[i.PSGParsePublicKeyForNewDeviceFailed=701]="PSGParsePublicKeyForNewDeviceFailed",i[i.PSGParsePublicKeyForLoginFailed=702]="PSGParsePublicKeyForLoginFailed",i[i.PSGCouldNotGetUserCredential=703]="PSGCouldNotGetUserCredential",i[i.PSGLoginRequired=704]="PSGLoginRequired",i))(_||{});var x=new g,B=typeof window>"u",N=r=>`Failed to access localStorage. ${r} must be run client-side.`,p=class{_isLocalHost(){return Boolean(window.location.hostname==="localhost"||window.location.hostname==="[::1]"||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/))}_isHttps(){return location.protocol==="https:"}setAuthToken(e){localStorage.setItem("psg_auth_token",e);let t=!this._isHttps()&&this._isLocalHost();document.cookie=`psg_auth_token = ${e}; path=/ ${t?"":";secure"}`}deleteAuthToken(){localStorage.removeItem("psg_auth_token"),document.cookie="psg_auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC;"}async psgCredIDExists(e){let t=e.user.id,n=e.handshake.challenge.publicKey.allowCredentials,s=localStorage.getItem("psg_cred_obj");if(!s)throw new o("Could not get psg_cred_obj",{status:700,statusText:"PSG Cred Object Does Not Exist"});let d=JSON.parse(s)[t];return n.find(S=>{if(x.encodeBytes(x.decodeBytes(S.id))===x.encodeBytes(x.decodeBytes(d)))return!0})}setPsgCredID(e,t){if(!t)throw new o("Could not get user's credential",{status:703,statusText:"PSG Could Not Get User Credential"});let n=localStorage.getItem("psg_cred_obj");if(n){let s=JSON.parse(n);s[e]=t==null?void 0:t.id,localStorage.setItem("psg_cred_obj",JSON.stringify(s))}else localStorage.setItem("psg_cred_obj",JSON.stringify({[e]:t==null?void 0:t.id}))}setRefreshToken(e){if(e){if(B){console.warn(N("setRefreshToken"));return}localStorage.setItem("psg_refresh_token",e)}}getRefreshToken(){return B?(console.warn(N("getRefreshToken")),null):localStorage.getItem("psg_refresh_token")}deleteRefreshToken(){if(B){console.warn(N("deleteRefreshToken"));return}localStorage.removeItem("psg_refresh_token")}};import K from"ua-parser-js";var w=class{constructor(){this.userAgent=new K}async getBrowserInfo(){return{createPassKeySupported:await this._canBrowserCreatePassKey(),getPassKeySupported:await this._canBrowserGetPasskey(),conditionalUISupported:await this._isConditionalMediationAvailable()}}async _canBrowserCreatePassKey(){return!!(this._isiOSPasskeySupported()||this._isMacPasskeySupported())}_canBrowserGetPasskey(){return this._canBrowserCreatePassKey()}async _isConditionalMediationAvailable(){return!1}_isiOSPasskeySupported(){return this.userAgent.getOS().name=="iOS"&&parseFloat(this.userAgent.getOS().version||"")>=16}_isMacPasskeySupported(){return this.userAgent.getBrowser().name=="Safari"&&parseFloat(this.userAgent.getBrowser().version||"")>=16&&this.userAgent.getOS().name=="Mac OS"}_isChrome107(){return this.userAgent.getBrowser().name=="Chrome"&&parseFloat(this.userAgent.getBrowser().version||"")>=107}};async function u(r){return r.ok?r.json():await r.text().then(e=>{throw new o(e,r)})}var j=new p,M=r=>typeof r=="object"&&r!==null&&typeof r.auth_result<"u";function y(r){if(!M(r))return console.warn("Not a valid auth response"),r;let e=r.auth_result.refresh_token;return e&&j.setRefreshToken(e),r}function O(){let r=navigator.userAgent.toLowerCase().indexOf("firefox")>-1,e=window.navigator.userAgent.match(/Firefox\/([0-9]+)\./),t=e?parseInt(e[1]):0;return navigator.platform.indexOf("Win")!==-1&&r&&t===98}function L(r){let e=new Uint8Array(68);e.set(r.slice(0,68));let t=new Uint8Array(r.byteLength-68);t.set(r.slice(68,r.byteLength));let n=new Uint8Array(15),s=new Uint8Array(e.byteLength+n.byteLength+t.byteLength);s.set(e,0),s.set(n,e.byteLength),s.set(t,e.byteLength+n.byteLength);let d=s[30]+15;return s.set([d],30),s}var F={URL:"https://auth.passage.id",version:"@passageidentity/passage-js 2.6.3"};var k=F;function a(r){let e=new Headers(r),t=k.version;return t&&e.append("Passage-Version",t),e}var R=new g,$=new p,W=new w,A=class{constructor(e,t){this.apiUrl=e+"/register/",this.identifier=t}async withWebAuthn(){let{createPassKeySupported:e}=await W.getBrowserInfo(),t=await fetch(this.apiUrl+"webauthn/start",{headers:a(),body:JSON.stringify({identifier:this.identifier}),method:"POST"}).then(u),n=await navigator.credentials.create({publicKey:this._parsePublicKey(t.handshake.challenge.publicKey)}).catch(S=>{throw new o("error parsing public key for webAuthn",{status:702,statusText:"PSG Parse Public Key For Login Failed"})}).then(S=>S),s=new Uint8Array(n==null?void 0:n.response.attestationObject);O()&&(s=L(s));let d=t.user.id,l=await fetch(this.apiUrl+"webauthn/finish",{headers:a(),method:"POST",body:JSON.stringify({user_id:d,handshake_id:t.handshake.id,handshake_response:{rawId:R.encodeBytes(n==null?void 0:n.rawId),id:n==null?void 0:n.id,type:n==null?void 0:n.type,response:{attestationObject:R.encodeBytes(s),clientDataJSON:R.encodeBytes(n==null?void 0:n.response.clientDataJSON)}},cred_type:e?"passkey":"platform"})}).then(u).then(y);return $.setPsgCredID(d,n),l.auth_result}_parsePublicKey(e){return e.challenge=R.decodeBytes(e.challenge.toString()),e.user.id=R.decodeBytes(e.user.id.toString()),e}};var T=new g,v=class{constructor(e,t){this.apiUrl=e+"/login/",this.identifier=t!=null?t:""}async withWebAuthn(){let e=JSON.stringify({identifier:this.identifier}),t=this.identifier?e:void 0,n=await fetch(this.apiUrl+"webauthn/start",{headers:a(),method:"POST",body:t}).then(u),s=await navigator.credentials.get({publicKey:this._parsePublicKey(n.handshake.challenge.publicKey)}).catch(l=>{throw new o("error parsing public key for webAuthn",{status:702,statusText:"PSG Parse Public Key For Login Failed"})}).then(l=>l);return s?(await fetch(this.apiUrl+"webauthn/finish",{headers:a(),method:"POST",body:JSON.stringify({user_id:this.identifier?n.user.id:void 0,handshake_id:n.handshake.id,handshake_response:{id:s.id,rawId:T.encodeBytes(s.rawId),type:s.type,response:{clientDataJSON:T.encodeBytes(s.response.clientDataJSON),authenticatorData:T.encodeBytes(s.response.authenticatorData),signature:T.encodeBytes(s.response.signature),userHandle:T.encodeBytes(s.response.userHandle)}}})}).then(u).then(y)).auth_result:{auth_token:"",redirect_url:""}}_parsePublicKey(e){if(e.challenge=Uint8Array.from(atob(e.challenge.toString()),t=>t.charCodeAt(0)),e.allowCredentials){for(let t=0;t<e.allowCredentials.length;t++){let n=e.allowCredentials[t];n.id=T.decodeBytes(n.id.toString())}return e}return e}};var P=class{constructor(e){this.apiUrl=e}async appInfo(){return(await fetch(this.apiUrl,{headers:a(),method:"GET"}).then(u)).app}async identifierExists(e){return(await fetch(this.apiUrl+"/users?identifier="+encodeURIComponent(e),{headers:a(),method:"GET"}).then(u)).user}};var f=new g,J=new p,m=class{constructor(e){this.apiUrl=e}async newRegister(e,t){return(await fetch(this.apiUrl+"/register/magic-link",{headers:a(),method:"POST",body:JSON.stringify({identifier:e,magic_link_path:window.location.pathname,language:t})}).then(u)).magic_link}async newLogin(e,t){return(await fetch(this.apiUrl+"/login/magic-link",{headers:a(),method:"POST",body:JSON.stringify({identifier:e,magic_link_path:window.location.pathname,language:t})}).then(u)).magic_link}async getStatus(e){return(await fetch(this.apiUrl+"/magic-link/status",{headers:a(),method:"POST",body:JSON.stringify({id:e})}).then(u).then(y)).auth_result}async activate(e){return(await fetch(this.apiUrl+"/magic-link/activate",{headers:a(),method:"PATCH",body:JSON.stringify({magic_link:e})}).then(u).then(y)).auth_result}async activateWebAuthnLogin(e){let t=await fetch(this.apiUrl+"/magic-link/webauthn/login/start",{headers:a(),body:JSON.stringify({magic_link:e}),method:"POST"}).then(u);if(!await J.psgCredIDExists(t))throw new o("psg_cred_obj does not exist in the allow list",{status:700,statusText:"Not Found"});let s=await navigator.credentials.get({publicKey:this._parsePublicKeyLogin(t.handshake.challenge.publicKey)}).catch(l=>{throw new o("could not parse publickey for login",{status:702,statusText:"PSG Parse Public Key For Login Failed"})});return s?(await fetch(this.apiUrl+"/magic-link/webauthn/login/finish",{headers:a(),method:"POST",body:JSON.stringify({magic_link:e,user_id:t.user.id,handshake_id:t.handshake.id,handshake_response:{id:s.id,rawId:f.encodeBytes(s.rawId),type:s.type,response:{clientDataJSON:f.encodeBytes(s.response.clientDataJSON),authenticatorData:f.encodeBytes(s.response.authenticatorData),signature:f.encodeBytes(s.response.signature),userHandle:f.encodeBytes(s.response.userHandle)}}})}).then(u).then(y)).auth_result:{auth_token:"",redirect_url:""}}async activateWebAuthnNewDevice(e){let t=await fetch(this.apiUrl+"/magic-link/webauthn/new/start",{headers:a(),body:JSON.stringify({magic_link:e}),method:"POST"}).then(u),n=await navigator.credentials.create({publicKey:this._parsePublicKeyNewDevice(t.handshake.challenge.publicKey)}).catch(S=>{throw new o("could not parse public key for new device",{status:701,statusText:"PSG Parse Public Key For New Device Failed"})}),s=new Uint8Array(n==null?void 0:n.response.attestationObject);O()&&(s=L(s));let d=await fetch(this.apiUrl+"/magic-link/webauthn/new/finish",{headers:a(),method:"POST",body:JSON.stringify({magic_link:e,user_id:t.user.id,handshake_id:t.handshake.id,handshake_response:{rawId:f.encodeBytes(n.rawId),id:n.id,type:n.type,response:{attestationObject:f.encodeBytes(s),clientDataJSON:f.encodeBytes(n.response.clientDataJSON)}},device_name:navigator.userAgent})}).then(u).then(y),l=t.user.id;return J.setPsgCredID(l,n),d.auth_result}_parsePublicKeyLogin(e){if(e.challenge=Uint8Array.from(atob(e.challenge.toString()),t=>t.charCodeAt(0)),e.allowCredentials){for(let t=0;t<e.allowCredentials.length;t++){let n=e.allowCredentials[t];n.id=f.decodeBytes(n.id.toString())}return e}return e}_parsePublicKeyNewDevice(e){return e.challenge=f.decodeBytes(e.challenge.toString()),e.user.id=f.decodeBytes(e.user.id.toString()),e}};import D from"jwt-decode";var U=new g,b=new p,z=new w,I=class{constructor(e){this.userID="",this._iss="",this.authToken=e,this._useLocalStorage=typeof e>"u",this.authGuard(),this._apiVersion="v1";try{new URL(this._iss),this._appEndpoint=`${this._iss}`}catch{this._appEndpoint=`${k.URL}/${this._apiVersion}/apps/${this._iss}`}this._currentUserEndpoint=`${this._appEndpoint}/currentuser`}_getAuthToken(){if(!this._useLocalStorage&&this.authToken!==void 0&&this.authToken!=="")return this.authToken;if(typeof window>"u")return console.warn("PassageUser is failed to access localStorage. This function must be run client-side or be provided an authToken JWT."),"";let e=localStorage.getItem("psg_auth_token");return e||""}_validJWTPayload(e){let t=["exp","iss","sub"],n=Math.floor(Date.now()/1e3);return t.forEach(s=>{if(!(s in e))return!1}),!(e.exp&&n>e.exp)}_validJWTHeader(e){let t={alg:"RS256",typ:"JWT"};return!(e.alg!==t.alg||e.typ!==t.typ)}authGuard(){let e=this._getAuthToken();try{let t=D(e,{header:!0}),n=D(e);return!!(n!==void 0&&t!==void 0&&(this.userID=n.sub,this._iss=n.iss,this._validJWTPayload(n)&&this._validJWTHeader(t)))}catch{return!1}}async userInfo(){return this.authGuard()?(await fetch(this._currentUserEndpoint,{method:"GET",headers:a({Authorization:`Bearer ${this._getAuthToken()}`})}).then(async t=>t.status!==200?void 0:await t.json()).catch(t=>{throw new o("Failed to fetch current user.",{status:404,statusText:"Not Found"})})).user:void 0}async changeEmail(e,t){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});return(await fetch(`${this._currentUserEndpoint}/email`,{method:"PATCH",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"}),body:JSON.stringify({new_email:e,language:t})}).then(u)).magic_link}async changePhone(e,t){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});return(await fetch(`${this._currentUserEndpoint}/phone`,{method:"PATCH",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"}),body:JSON.stringify({new_phone:e,language:t})}).then(u)).magic_link}async editDevice(e,t){if(!this.authGuard())throw new o("Current user is not authorized.",{status:409,statusText:"Conflict"});if(e===""||e===void 0)throw new o("A deviceID is required for an edit device request.",{status:400,statusText:"Bad Request"});if(Object.keys(t).length===0)throw new o("Edit device request must not have an empty request body.",{status:400,statusText:"Bad Request"});return(await fetch(`${this._currentUserEndpoint}/devices/${e}`,{method:"PATCH",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"}),body:JSON.stringify({...t})}).then(u)).device}async listDevices(){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});return(await fetch(`${this._currentUserEndpoint}/devices/`,{method:"GET",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"})}).then(u)).devices}async addDevice(){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});let{createPassKeySupported:e}=await z.getBrowserInfo(),t=await fetch(this._currentUserEndpoint+"/devices/start",{headers:a({Authorization:`Bearer ${this._getAuthToken()}`}),method:"POST"}).then(u),n=await navigator.credentials.create({publicKey:this._parsePublicKey(t.handshake.challenge.publicKey)}).catch(l=>{throw new o("failed to parse public key",{status:701,statusText:"PSG Parse Public Key For New Device Failed"})}).then(l=>l),s=t.user.id,d=await fetch(this._currentUserEndpoint+"/devices/finish",{headers:a({Authorization:`Bearer ${this._getAuthToken()}`}),method:"POST",body:JSON.stringify({user_id:s,handshake_id:t.handshake.id,handshake_response:{rawId:U.encodeBytes(n==null?void 0:n.rawId),id:n==null?void 0:n.id,type:n==null?void 0:n.type,response:{attestationObject:U.encodeBytes(n==null?void 0:n.response.attestationObject),clientDataJSON:U.encodeBytes(n==null?void 0:n.response.clientDataJSON)}},cred_type:e?"passkey":"platform"})}).then(u);return b.setPsgCredID(s,n),d.device}async deleteDevice(e){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});if(!e)throw new o("A deviceID is required to delete a device.",{status:404,statusText:"Not Found"});let t=!1;return t=await fetch(`${this._currentUserEndpoint}/devices/${e}`,{method:"DELETE",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"})}).then(async n=>n.ok?!0:await n.text().then(s=>{throw new o(s,n)})),t}_parsePublicKey(e){return e.challenge=U.decodeBytes(e.challenge.toString()),e.user.id=U.decodeBytes(e.user.id.toString()),e}async getMetadata(){return this.authGuard()?(await fetch(`${this._currentUserEndpoint}/user-metadata`,{method:"GET",headers:a({Authorization:`Bearer ${this._getAuthToken()}`})}).then(u)).user_metadata:void 0}async updateMetadata(e){if(!this.authGuard())throw new o("Current user is not authorized.",{status:401,statusText:"Unauthorized"});return(await fetch(`${this._currentUserEndpoint}/user-metadata`,{method:"PATCH",headers:a({Authorization:`Bearer ${this._getAuthToken()}`,"Content-Type":"application/json"}),body:JSON.stringify({user_metadata:e})}).then(u)).user}async signOut(){b.deleteAuthToken();let e=b.getRefreshToken();return e?fetch(`${this._appEndpoint}/tokens/?`+new URLSearchParams({refresh_token:e}),{method:"DELETE"}).then(({status:t})=>t===200).finally(()=>{b.deleteRefreshToken()}):!0}async getAuthToken(){let e=this._getAuthToken(),t=D(e);return t!==void 0&&this._validJWTPayload(t)?Promise.resolve(e):this.refresh()}async refresh(){let e=new o("Login required",{status:704,statusText:"Login required"}),t=b.getRefreshToken();return t?fetch(`${this._appEndpoint}/tokens/`,{headers:a(),method:"POST",body:JSON.stringify({refresh_token:t})}).then(u).then(n=>{b.setRefreshToken(n.auth_result.refresh_token);let s=n.auth_result.auth_token;return this._useLocalStorage?b.setAuthToken(s):this.authToken=s,s}).catch(()=>{throw e}):Promise.reject(e)}};var G=async(r,e)=>{let t,n=new Promise(s=>{t=setTimeout(s,e)});return Promise.race([r,n]).then(s=>(clearTimeout(t),s))};var q=class{constructor(e){this.appID=e,this.baseUrl=k.URL,this.apiVersion="v1",this.fullUrl=`${this.baseUrl}/${this.apiVersion}/apps/${this.appID}`}credIDExists(e){let t=localStorage.getItem("psg_cred_obj");return t?!!JSON.parse(t)[e]:!1}setAuthToken(e){new p().setAuthToken(e)}signOut(){console.warn("Passage.signOut is deprecated and will be removed in a future version. Use User.signOut instead."),new p().deleteAuthToken()}async register(e){return await new A(this.fullUrl,e).withWebAuthn()}async login(e){return await new v(this.fullUrl,e).withWebAuthn()}async appInfo(){return await new P(this.fullUrl).appInfo()}async browserInfo(){return await new w().getBrowserInfo()}checkWebauthnConfig(e){let t=!0;return e.auth_origin.replace(/\/$/,"")!=window.location.origin.replace(/\/$/,"")&&(console.error('The auth_origin configured for webauthn in your app settings does not match the "origin" of your current URL.  Please reconfigure this in the admin console. (Your current "origin" is `'+window.location.origin+"`) Passage will continue to work with other authentication methods."),t=!1),t}async isWebauthnSupported(e){let t=!1;return window.PublicKeyCredential&&(e?t=!0:await G(window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then(n=>{t=n}).catch(()=>console.log("Something went wrong.")),150)),t}async identifierExists(e){return await new P(this.fullUrl).identifierExists(e)}async newRegisterMagicLink(e,t){return await new m(this.fullUrl).newRegister(e,t)}async newLoginMagicLink(e,t){return await new m(this.fullUrl).newLogin(e,t)}async magicLinkActivate(e){return await new m(this.fullUrl).activate(e)}async magicLinkActivateWebAuthnLogin(e){return await new m(this.fullUrl).activateWebAuthnLogin(e)}async magicLinkActivateWebAuthnNewDevice(e){return await new m(this.fullUrl).activateWebAuthnNewDevice(e)}async getMagicLinkStatus(e){return await new m(this.fullUrl).getStatus(e)}getCurrentUser(e){return new I(e)}async createUser(e){return(await fetch(`${this.fullUrl}/users`,{headers:a(),body:JSON.stringify({...e}),method:"POST"}).then(u)).user}};var C=(n=>(n.email="email",n.phone="phone",n.both="both",n))(C||{}),V=(s=>(s.Phone="phone",s.Email="email",s.Both="both",s.Either="either",s))(V||{}),Y=(l=>(l.STRING="string",l.BOOLEAN="boolean",l.INTEGER="integer",l.DATE="date",l.PHONE="phone",l.EMAIL="email",l))(Y||{});var Q=(n=>(n.ACTIVE="active",n.INACTIVE="inactive",n.PENDING="pending",n))(Q||{}),X=(t=>(t.Platform="platform",t.Passkey="passkey",t))(X||{});export{C as Identifier,q as Passage,o as PassageError,_ as PassageErrorCode,Q as PassageUserStatus,V as RequiredIdentifier,I as User,Y as UserMetadataType,X as WebAuthnType};
