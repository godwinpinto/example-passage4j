import { PassageUserInfo } from '@passageidentity/passage-js';
export { PassageUserInfo } from '@passageidentity/passage-js';

/**
 * The PassageUser class retrieves information about the current user of the application.
 */
declare class PassageUser {
    #private;
    /**
     * constructor for PassageUser class.
     * @param {string} [auth_token] optional param to supply the auth_token (JWT) of the current user.
     * If you provide a custom onSuccess callback to the passage elements then you will need to provide this auth_token.
     */
    constructor(auth_token?: string);
    /**
     * authGuard checks if the current user has a JWT that is valid and potentially verifiable.
     * IMPORTANT: this is not verifying the JWT, it is only checking if the JWT is formatted properly.
     * @return {boolean} true if the user has a valid (but unverified) JWT, false if not.
     */
    authGuard(): boolean;
    /**
     * userInfo returns the user information for the currently authenticated user.
     * @return {PassageCurrentUser | undefined} the current Passage user's info, or undefined if the
     * current Passage user's authentication token could not be verified.
     */
    userInfo(): Promise<PassageUserInfo | undefined>;
}

export { PassageUser };
