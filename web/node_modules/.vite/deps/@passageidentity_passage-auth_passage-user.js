import {
  __commonJS,
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/ua-parser-js/src/ua-parser.js
var require_ua_parser = __commonJS({
  "node_modules/ua-parser-js/src/ua-parser.js"(exports, module) {
    (function(window2, undefined) {
      "use strict";
      var LIBVERSION = "1.0.35", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 350;
      var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", VIERA = "Viera", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS";
      var extend = function(regexes2, extensions) {
        var mergedRegexes = {};
        for (var i2 in regexes2) {
          if (extensions[i2] && extensions[i2].length % 2 === 0) {
            mergedRegexes[i2] = extensions[i2].concat(regexes2[i2]);
          } else {
            mergedRegexes[i2] = regexes2[i2];
          }
        }
        return mergedRegexes;
      }, enumerize = function(arr) {
        var enums = {};
        for (var i2 = 0; i2 < arr.length; i2++) {
          enums[arr[i2].toUpperCase()] = arr[i2];
        }
        return enums;
      }, has = function(str1, str2) {
        return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
      }, lowerize = function(str) {
        return str.toLowerCase();
      }, majorize = function(version) {
        return typeof version === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined;
      }, trim = function(str, len) {
        if (typeof str === STR_TYPE) {
          str = str.replace(/^\s\s*/, EMPTY);
          return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
      };
      var rgxMapper = function(ua, arrays) {
        var i2 = 0, j2, k2, p2, q2, matches, match;
        while (i2 < arrays.length && !matches) {
          var regex = arrays[i2], props = arrays[i2 + 1];
          j2 = k2 = 0;
          while (j2 < regex.length && !matches) {
            if (!regex[j2]) {
              break;
            }
            matches = regex[j2++].exec(ua);
            if (!!matches) {
              for (p2 = 0; p2 < props.length; p2++) {
                match = matches[++k2];
                q2 = props[p2];
                if (typeof q2 === OBJ_TYPE && q2.length > 0) {
                  if (q2.length === 2) {
                    if (typeof q2[1] == FUNC_TYPE) {
                      this[q2[0]] = q2[1].call(this, match);
                    } else {
                      this[q2[0]] = q2[1];
                    }
                  } else if (q2.length === 3) {
                    if (typeof q2[1] === FUNC_TYPE && !(q2[1].exec && q2[1].test)) {
                      this[q2[0]] = match ? q2[1].call(this, match, q2[2]) : undefined;
                    } else {
                      this[q2[0]] = match ? match.replace(q2[1], q2[2]) : undefined;
                    }
                  } else if (q2.length === 4) {
                    this[q2[0]] = match ? q2[3].call(this, match.replace(q2[1], q2[2])) : undefined;
                  }
                } else {
                  this[q2] = match ? match : undefined;
                }
              }
            }
          }
          i2 += 2;
        }
      }, strMapper = function(str, map) {
        for (var i2 in map) {
          if (typeof map[i2] === OBJ_TYPE && map[i2].length > 0) {
            for (var j2 = 0; j2 < map[i2].length; j2++) {
              if (has(map[i2][j2], str)) {
                return i2 === UNKNOWN ? undefined : i2;
              }
            }
          } else if (has(map[i2], str)) {
            return i2 === UNKNOWN ? undefined : i2;
          }
        }
        return str;
      };
      var oldSafariMap = {
        "1.0": "/8",
        "1.2": "/1",
        "1.3": "/3",
        "2.0": "/412",
        "2.0.2": "/416",
        "2.0.3": "/417",
        "2.0.4": "/419",
        "?": "/"
      }, windowsVersionMap = {
        "ME": "4.90",
        "NT 3.11": "NT3.51",
        "NT 4.0": "NT4.0",
        "2000": "NT 5.0",
        "XP": ["NT 5.1", "NT 5.2"],
        "Vista": "NT 6.0",
        "7": "NT 6.1",
        "8": "NT 6.2",
        "8.1": "NT 6.3",
        "10": ["NT 6.4", "NT 10.0"],
        "RT": "ARM"
      };
      var regexes = {
        browser: [
          [
            /\b(?:crmo|crios)\/([\w\.]+)/i
            // Chrome for Android/iOS
          ],
          [VERSION, [NAME, "Chrome"]],
          [
            /edg(?:e|ios|a)?\/([\w\.]+)/i
            // Microsoft Edge
          ],
          [VERSION, [NAME, "Edge"]],
          [
            // Presto based
            /(opera mini)\/([-\w\.]+)/i,
            // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
            // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
            // Opera
          ],
          [NAME, VERSION],
          [
            /opios[\/ ]+([\w\.]+)/i
            // Opera mini on iphone >= 8.0
          ],
          [VERSION, [NAME, OPERA + " Mini"]],
          [
            /\bopr\/([\w\.]+)/i
            // Opera Webkit
          ],
          [VERSION, [NAME, OPERA]],
          [
            // Mixed
            /(kindle)\/([\w\.]+)/i,
            // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
            // Lunascape/Maxthon/Netfront/Jasmine/Blazer
            // Trident based
            /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
            // Avant/IEMobile/SlimBrowser
            /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
            // Baidu Browser
            /(?:ms|\()(ie) ([\w\.]+)/i,
            // Internet Explorer
            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
            // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
            /(heytap|ovi)browser\/([\d\.]+)/i,
            // Heytap/Ovi
            /(weibo)__([\d\.]+)/i
            // Weibo
          ],
          [NAME, VERSION],
          [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i
            // UCBrowser
          ],
          [VERSION, [NAME, "UC" + BROWSER]],
          [
            /microm.+\bqbcore\/([\w\.]+)/i,
            // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i
          ],
          [VERSION, [NAME, "WeChat(Win) Desktop"]],
          [
            /micromessenger\/([\w\.]+)/i
            // WeChat
          ],
          [VERSION, [NAME, "WeChat"]],
          [
            /konqueror\/([\w\.]+)/i
            // Konqueror
          ],
          [VERSION, [NAME, "Konqueror"]],
          [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i
            // IE11
          ],
          [VERSION, [NAME, "IE"]],
          [
            /ya(?:search)?browser\/([\w\.]+)/i
            // Yandex
          ],
          [VERSION, [NAME, "Yandex"]],
          [
            /(avast|avg)\/([\w\.]+)/i
            // Avast/AVG Secure Browser
          ],
          [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION],
          [
            /\bfocus\/([\w\.]+)/i
            // Firefox Focus
          ],
          [VERSION, [NAME, FIREFOX + " Focus"]],
          [
            /\bopt\/([\w\.]+)/i
            // Opera Touch
          ],
          [VERSION, [NAME, OPERA + " Touch"]],
          [
            /coc_coc\w+\/([\w\.]+)/i
            // Coc Coc Browser
          ],
          [VERSION, [NAME, "Coc Coc"]],
          [
            /dolfin\/([\w\.]+)/i
            // Dolphin
          ],
          [VERSION, [NAME, "Dolphin"]],
          [
            /coast\/([\w\.]+)/i
            // Opera Coast
          ],
          [VERSION, [NAME, OPERA + " Coast"]],
          [
            /miuibrowser\/([\w\.]+)/i
            // MIUI Browser
          ],
          [VERSION, [NAME, "MIUI " + BROWSER]],
          [
            /fxios\/([-\w\.]+)/i
            // Firefox for iOS
          ],
          [VERSION, [NAME, FIREFOX]],
          [
            /\bqihu|(qi?ho?o?|360)browser/i
            // 360
          ],
          [[NAME, "360 " + BROWSER]],
          [
            /(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i
          ],
          [[NAME, /(.+)/, "$1 " + BROWSER], VERSION],
          [
            // Oculus/Samsung/Sailfish/Huawei Browser
            /(comodo_dragon)\/([\w\.]+)/i
            // Comodo Dragon
          ],
          [[NAME, /_/g, " "], VERSION],
          [
            /(electron)\/([\w\.]+) safari/i,
            // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
            // Tesla
            /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i
            // QQBrowser/Baidu App/2345 Browser
          ],
          [NAME, VERSION],
          [
            /(metasr)[\/ ]?([\w\.]+)/i,
            // SouGouBrowser
            /(lbbrowser)/i,
            // LieBao Browser
            /\[(linkedin)app\]/i
            // LinkedIn App for iOS & Android
          ],
          [NAME],
          [
            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
            // Facebook App for iOS & Android
          ],
          [[NAME, FACEBOOK], VERSION],
          [
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
            // Kakao App
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
            // Naver InApp
            /safari (line)\/([\w\.]+)/i,
            // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,
            // Line App for Android
            /(chromium|instagram)[\/ ]([-\w\.]+)/i
            // Chromium/Instagram
          ],
          [NAME, VERSION],
          [
            /\bgsa\/([\w\.]+) .*safari\//i
            // Google Search Appliance on iOS
          ],
          [VERSION, [NAME, "GSA"]],
          [
            /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i
            // TikTok
          ],
          [VERSION, [NAME, "TikTok"]],
          [
            /headlesschrome(?:\/([\w\.]+)| )/i
            // Chrome Headless
          ],
          [VERSION, [NAME, CHROME + " Headless"]],
          [
            / wv\).+(chrome)\/([\w\.]+)/i
            // Chrome WebView
          ],
          [[NAME, CHROME + " WebView"], VERSION],
          [
            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i
            // Android Browser
          ],
          [VERSION, [NAME, "Android " + BROWSER]],
          [
            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
            // Chrome/OmniWeb/Arora/Tizen/Nokia
          ],
          [NAME, VERSION],
          [
            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i
            // Mobile Safari
          ],
          [VERSION, [NAME, "Mobile Safari"]],
          [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i
            // Safari & Safari Mobile
          ],
          [VERSION, NAME],
          [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i
            // Safari < 3.0
          ],
          [NAME, [VERSION, strMapper, oldSafariMap]],
          [
            /(webkit|khtml)\/([\w\.]+)/i
          ],
          [NAME, VERSION],
          [
            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i
            // Netscape
          ],
          [[NAME, "Netscape"], VERSION],
          [
            /mobile vr; rv:([\w\.]+)\).+firefox/i
            // Firefox Reality
          ],
          [VERSION, [NAME, FIREFOX + " Reality"]],
          [
            /ekiohf.+(flow)\/([\w\.]+)/i,
            // Flow
            /(swiftfox)/i,
            // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
            // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
            // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,
            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
            // Mozilla
            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
            // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i,
            // Links
            /panasonic;(viera)/i
            // Panasonic Viera
          ],
          [NAME, VERSION],
          [
            /(cobalt)\/([\w\.]+)/i
            // Cobalt
          ],
          [NAME, [VERSION, /master.|lts./, ""]]
        ],
        cpu: [
          [
            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i
            // AMD64 (x64)
          ],
          [[ARCHITECTURE, "amd64"]],
          [
            /(ia32(?=;))/i
            // IA32 (quicktime)
          ],
          [[ARCHITECTURE, lowerize]],
          [
            /((?:i[346]|x)86)[;\)]/i
            // IA32 (x86)
          ],
          [[ARCHITECTURE, "ia32"]],
          [
            /\b(aarch64|arm(v?8e?l?|_?64))\b/i
            // ARM64
          ],
          [[ARCHITECTURE, "arm64"]],
          [
            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i
            // ARMHF
          ],
          [[ARCHITECTURE, "armhf"]],
          [
            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
          ],
          [[ARCHITECTURE, "arm"]],
          [
            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i
            // PowerPC
          ],
          [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
          [
            /(sun4\w)[;\)]/i
            // SPARC
          ],
          [[ARCHITECTURE, "sparc"]],
          [
            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
            // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
          ],
          [[ARCHITECTURE, lowerize]]
        ],
        device: [
          [
            //////////////////////////
            // MOBILES & TABLETS
            /////////////////////////
            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
          [
            /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]([-\w]+)/i,
            /sec-(sgh\w+)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
          [
            // Apple
            /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i
            // iPod/iPhone
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
          [
            /\((ipad);[-\w\),; ]+apple/i,
            // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
          [
            /(macintosh);/i
          ],
          [MODEL, [VENDOR, APPLE]],
          [
            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
          ],
          [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
          [
            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
          [
            /(?:huawei|honor)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
          [
            // Xiaomi
            /\b(poco[\w ]+)(?: bui|\))/i,
            // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,
            // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
            // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
            // Xiaomi Redmi
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
            // Xiaomi Mi
          ],
          [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, MOBILE]],
          [
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
            // Mi Pad tablets
          ],
          [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, TABLET]],
          [
            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
          ],
          [MODEL, [VENDOR, "OPPO"], [TYPE, MOBILE]],
          [
            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
          ],
          [MODEL, [VENDOR, "Vivo"], [TYPE, MOBILE]],
          [
            // Realme
            /\b(rmx[12]\d{3})(?: bui|;|\))/i
          ],
          [MODEL, [VENDOR, "Realme"], [TYPE, MOBILE]],
          [
            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
          [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
          [
            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
          ],
          [MODEL, [VENDOR, LG], [TYPE, TABLET]],
          [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
          ],
          [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
          [
            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
          ],
          [MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
          [
            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
          ],
          [[MODEL, /_/g, " "], [VENDOR, "Nokia"], [TYPE, MOBILE]],
          [
            // Google
            /(pixel c)\b/i
            // Google Pixel C
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
          [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i
            // Google Pixel
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
          [
            // Sony
            /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
          ],
          [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
          [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
          ],
          [[MODEL, "Xperia Tablet"], [VENDOR, SONY], [TYPE, TABLET]],
          [
            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
          ],
          [MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
          [
            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
            // Kindle Fire without Silk / Echo Show
            /(kf[a-z]+)( bui|\)).+silk\//i
            // Kindle Fire HD
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
          [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i
            // Fire Phone
          ],
          [[MODEL, /(.+)/g, "Fire Phone $1"], [VENDOR, AMAZON], [TYPE, MOBILE]],
          [
            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i
            // BlackBerry PlayBook
          ],
          [MODEL, VENDOR, [TYPE, TABLET]],
          [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i
            // BlackBerry 10
          ],
          [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
          [
            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
          [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
          [
            // HTC
            /(nexus 9)/i
            // HTC Nexus 9
          ],
          [MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
          [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
            // HTC
            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
            // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
          ],
          [VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
          [
            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
          ],
          [MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
          [
            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
          ],
          [MODEL, [VENDOR, "Meizu"], [TYPE, MOBILE]],
          [
            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
            // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp) ([\w ]+\w)/i,
            // HP iPAQ
            /(asus)-?(\w+)/i,
            // Asus
            /(microsoft); (lumia[\w ]+)/i,
            // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,
            // Lenovo
            /(jolla)/i,
            // Jolla
            /(oppo) ?([\w ]+) bui/i
            // OPPO
          ],
          [VENDOR, MODEL, [TYPE, MOBILE]],
          [
            /(kobo)\s(ereader|touch)/i,
            // Kobo
            /(archos) (gamepad2?)/i,
            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,
            // HP TouchPad
            /(kindle)\/([\w\.]+)/i,
            // Kindle
            /(nook)[\w ]+build\/(\w+)/i,
            // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,
            // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
            // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,
            // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,
            // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i
            // Vodafone
          ],
          [VENDOR, MODEL, [TYPE, TABLET]],
          [
            /(surface duo)/i
            // Surface Duo
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
          [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i
            // Fairphone
          ],
          [MODEL, [VENDOR, "Fairphone"], [TYPE, MOBILE]],
          [
            /(u304aa)/i
            // AT&T
          ],
          [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
          [
            /\bsie-(\w*)/i
            // Siemens
          ],
          [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
          [
            /\b(rct\w+) b/i
            // RCA Tablets
          ],
          [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
          [
            /\b(venue[\d ]{2,7}) b/i
            // Dell Venue Tablets
          ],
          [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
          [
            /\b(q(?:mv|ta)\w+) b/i
            // Verizon Tablet
          ],
          [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
          [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
            // Barnes & Noble Tablet
          ],
          [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
          [
            /\b(tm\d{3}\w+) b/i
          ],
          [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
          [
            /\b(k88) b/i
            // ZTE K Series Tablet
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
          [
            /\b(nx\d{3}j) b/i
            // ZTE Nubia
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
          [
            /\b(gen\d{3}) b.+49h/i
            // Swiss GEN Mobile
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
          [
            /\b(zur\d{3}) b/i
            // Swiss ZUR Tablet
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
          [
            /\b((zeki)?tb.*\b) b/i
            // Zeki Tablets
          ],
          [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
          [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i
            // Dragon Touch Tablet
          ],
          [[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
          [
            /\b(ns-?\w{0,9}) b/i
            // Insignia Tablets
          ],
          [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
          [
            /\b((nxa|next)-?\w{0,9}) b/i
            // NextBook Tablets
          ],
          [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
          [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
            // Voice Xtreme Phones
          ],
          [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
          [
            /\b(lvtel\-)?(v1[12]) b/i
            // LvTel Phones
          ],
          [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
          [
            /\b(ph-1) /i
            // Essential PH-1
          ],
          [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
          [
            /\b(v(100md|700na|7011|917g).*\b) b/i
            // Envizen Tablets
          ],
          [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
          [
            /\b(trio[-\w\. ]+) b/i
            // MachSpeed Tablets
          ],
          [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
          [
            /\btu_(1491) b/i
            // Rotor Tablets
          ],
          [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
          [
            /(shield[\w ]+) b/i
            // Nvidia Shield Tablets
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE, TABLET]],
          [
            /(sprint) (\w+)/i
            // Sprint Phones
          ],
          [VENDOR, MODEL, [TYPE, MOBILE]],
          [
            /(kin\.[onetw]{3})/i
            // Microsoft Kin
          ],
          [[MODEL, /\./g, " "], [VENDOR, MICROSOFT], [TYPE, MOBILE]],
          [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i
            // Zebra
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
          [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
          [
            ///////////////////
            // SMARTTVS
            ///////////////////
            /smart-tv.+(samsung)/i
            // Samsung
          ],
          [VENDOR, [TYPE, SMARTTV]],
          [
            /hbbtv.+maple;(\d+)/i
          ],
          [[MODEL, /^/, "SmartTV"], [VENDOR, SAMSUNG], [TYPE, SMARTTV]],
          [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
            // LG SmartTV
          ],
          [[VENDOR, LG], [TYPE, SMARTTV]],
          [
            /(apple) ?tv/i
            // Apple TV
          ],
          [VENDOR, [MODEL, APPLE + " TV"], [TYPE, SMARTTV]],
          [
            /crkey/i
            // Google Chromecast
          ],
          [[MODEL, CHROME + "cast"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],
          [
            /droid.+aft(\w)( bui|\))/i
            // Fire TV
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
          [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i
            // Sharp
          ],
          [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
          [
            /(bravia[\w ]+)( bui|\))/i
            // Sony
          ],
          [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
          [
            /(mitv-\w{5}) bui/i
            // Xiaomi
          ],
          [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
          [
            /Hbbtv.*(technisat) (.*);/i
            // TechniSAT
          ],
          [VENDOR, MODEL, [TYPE, SMARTTV]],
          [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
            // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
            // HbbTV devices
          ],
          [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]],
          [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i
            // SmartTV from Unidentified Vendors
          ],
          [[TYPE, SMARTTV]],
          [
            ///////////////////
            // CONSOLES
            ///////////////////
            /(ouya)/i,
            // Ouya
            /(nintendo) ([wids3utch]+)/i
            // Nintendo
          ],
          [VENDOR, MODEL, [TYPE, CONSOLE]],
          [
            /droid.+; (shield) bui/i
            // Nvidia
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
          [
            /(playstation [345portablevi]+)/i
            // Playstation
          ],
          [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
          [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i
            // Microsoft Xbox
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
          [
            ///////////////////
            // WEARABLES
            ///////////////////
            /((pebble))app/i
            // Pebble
          ],
          [VENDOR, MODEL, [TYPE, WEARABLE]],
          [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i
            // Apple Watch
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
          [
            /droid.+; (glass) \d/i
            // Google Glass
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
          [
            /droid.+; (wt63?0{2,3})\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
          [
            /(quest( 2| pro)?)/i
            // Oculus Quest
          ],
          [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
          [
            ///////////////////
            // EMBEDDED
            ///////////////////
            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i
            // Tesla
          ],
          [VENDOR, [TYPE, EMBEDDED]],
          [
            /(aeobc)\b/i
            // Echo Dot
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],
          [
            ////////////////////
            // MIXED (GENERIC)
            ///////////////////
            /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i
            // Android Phones from Unidentified Vendors
          ],
          [MODEL, [TYPE, MOBILE]],
          [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
            // Android Tablets from Unidentified Vendors
          ],
          [MODEL, [TYPE, TABLET]],
          [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i
            // Unidentifiable Tablet
          ],
          [[TYPE, TABLET]],
          [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
            // Unidentifiable Mobile
          ],
          [[TYPE, MOBILE]],
          [
            /(android[-\w\. ]{0,9});.+buil/i
            // Generic Android Device
          ],
          [MODEL, [VENDOR, "Generic"]]
        ],
        engine: [
          [
            /windows.+ edge\/([\w\.]+)/i
            // EdgeHTML
          ],
          [VERSION, [NAME, EDGE + "HTML"]],
          [
            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i
            // Blink
          ],
          [VERSION, [NAME, "Blink"]],
          [
            /(presto)\/([\w\.]+)/i,
            // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
            // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
            /ekioh(flow)\/([\w\.]+)/i,
            // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
            // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i,
            // iCab
            /\b(libweb)/i
          ],
          [NAME, VERSION],
          [
            /rv\:([\w\.]{1,9})\b.+(gecko)/i
            // Gecko
          ],
          [VERSION, NAME]
        ],
        os: [
          [
            // Windows
            /microsoft (windows) (vista|xp)/i
            // Windows (iTunes)
          ],
          [NAME, VERSION],
          [
            /(windows) nt 6\.2; (arm)/i,
            // Windows RT
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
            // Windows Phone
            /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
          ],
          [NAME, [VERSION, strMapper, windowsVersionMap]],
          [
            /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
          ],
          [[NAME, "Windows"], [VERSION, strMapper, windowsVersionMap]],
          [
            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
            // iOS
            /ios;fbsv\/([\d\.]+)/i,
            /cfnetwork\/.+darwin/i
          ],
          [[VERSION, /_/g, "."], [NAME, "iOS"]],
          [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i
            // Mac OS
          ],
          [[NAME, MAC_OS], [VERSION, /_/g, "."]],
          [
            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i
            // Android-x86/HarmonyOS
          ],
          [VERSION, NAME],
          [
            // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,
            // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,
            // Tizen/KaiOS
            /\((series40);/i
            // Series 40
          ],
          [NAME, VERSION],
          [
            /\(bb(10);/i
            // BlackBerry 10
          ],
          [VERSION, [NAME, BLACKBERRY]],
          [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i
            // Symbian
          ],
          [VERSION, [NAME, "Symbian"]],
          [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
            // Firefox OS
          ],
          [VERSION, [NAME, FIREFOX + " OS"]],
          [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i
            // WebOS
          ],
          [VERSION, [NAME, "webOS"]],
          [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i
            // watchOS
          ],
          [VERSION, [NAME, "watchOS"]],
          [
            // Google Chromecast
            /crkey\/([\d\.]+)/i
            // Google Chromecast
          ],
          [VERSION, [NAME, CHROME + "cast"]],
          [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i
            // Chromium OS
          ],
          [[NAME, CHROMIUM_OS], VERSION],
          [
            // Smart TVs
            /panasonic;(viera)/i,
            // Panasonic Viera
            /(netrange)mmh/i,
            // Netrange
            /(nettv)\/(\d+\.[\w\.]+)/i,
            // NetTV
            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,
            // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,
            // Microsoft Xbox (360, One, X, S, Series X, Series S)
            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,
            // Mint
            /(mageia|vectorlinux)[; ]/i,
            // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
            // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,
            // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,
            // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
            // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i
            // Haiku
          ],
          [NAME, VERSION],
          [
            /(sunos) ?([\w\.\d]*)/i
            // Solaris
          ],
          [[NAME, "Solaris"], VERSION],
          [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
            // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
            // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
            // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
            /(unix) ?([\w\.]*)/i
            // UNIX
          ],
          [NAME, VERSION]
        ]
      };
      var UAParser = function(ua, extensions) {
        if (typeof ua === OBJ_TYPE) {
          extensions = ua;
          ua = undefined;
        }
        if (!(this instanceof UAParser)) {
          return new UAParser(ua, extensions).getResult();
        }
        var _navigator = typeof window2 !== UNDEF_TYPE && window2.navigator ? window2.navigator : undefined;
        var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
        var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;
        this.getBrowser = function() {
          var _browser = {};
          _browser[NAME] = undefined;
          _browser[VERSION] = undefined;
          rgxMapper.call(_browser, _ua, _rgxmap.browser);
          _browser[MAJOR] = majorize(_browser[VERSION]);
          if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
            _browser[NAME] = "Brave";
          }
          return _browser;
        };
        this.getCPU = function() {
          var _cpu = {};
          _cpu[ARCHITECTURE] = undefined;
          rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
          return _cpu;
        };
        this.getDevice = function() {
          var _device = {};
          _device[VENDOR] = undefined;
          _device[MODEL] = undefined;
          _device[TYPE] = undefined;
          rgxMapper.call(_device, _ua, _rgxmap.device);
          if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
            _device[TYPE] = MOBILE;
          }
          if (_isSelfNav && _device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
            _device[MODEL] = "iPad";
            _device[TYPE] = TABLET;
          }
          return _device;
        };
        this.getEngine = function() {
          var _engine = {};
          _engine[NAME] = undefined;
          _engine[VERSION] = undefined;
          rgxMapper.call(_engine, _ua, _rgxmap.engine);
          return _engine;
        };
        this.getOS = function() {
          var _os = {};
          _os[NAME] = undefined;
          _os[VERSION] = undefined;
          rgxMapper.call(_os, _ua, _rgxmap.os);
          if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != "Unknown") {
            _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS);
          }
          return _os;
        };
        this.getResult = function() {
          return {
            ua: this.getUA(),
            browser: this.getBrowser(),
            engine: this.getEngine(),
            os: this.getOS(),
            device: this.getDevice(),
            cpu: this.getCPU()
          };
        };
        this.getUA = function() {
          return _ua;
        };
        this.setUA = function(ua2) {
          _ua = typeof ua2 === STR_TYPE && ua2.length > UA_MAX_LENGTH ? trim(ua2, UA_MAX_LENGTH) : ua2;
          return this;
        };
        this.setUA(_ua);
        return this;
      };
      UAParser.VERSION = LIBVERSION;
      UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
      UAParser.CPU = enumerize([ARCHITECTURE]);
      UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
      UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);
      if (typeof exports !== UNDEF_TYPE) {
        if (typeof module !== UNDEF_TYPE && module.exports) {
          exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
      } else {
        if (typeof define === FUNC_TYPE && define.amd) {
          define(function() {
            return UAParser;
          });
        } else if (typeof window2 !== UNDEF_TYPE) {
          window2.UAParser = UAParser;
        }
      }
      var $2 = typeof window2 !== UNDEF_TYPE && (window2.jQuery || window2.Zepto);
      if ($2 && !$2.ua) {
        var parser = new UAParser();
        $2.ua = parser.getResult();
        $2.ua.get = function() {
          return parser.getUA();
        };
        $2.ua.set = function(ua) {
          parser.setUA(ua);
          var result = parser.getResult();
          for (var prop in result) {
            $2.ua[prop] = result[prop];
          }
        };
      }
    })(typeof window === "object" ? window : exports);
  }
});

// node_modules/@passageidentity/passage-auth/node_modules/@passageidentity/passage-js/dist/index.js
var import_ua_parser_js = __toESM(require_ua_parser());

// node_modules/jwt-decode/build/jwt-decode.esm.js
function e(e2) {
  this.message = e2;
}
e.prototype = new Error(), e.prototype.name = "InvalidCharacterError";
var r = "undefined" != typeof window && window.atob && window.atob.bind(window) || function(r2) {
  var t3 = String(r2).replace(/=+$/, "");
  if (t3.length % 4 == 1)
    throw new e("'atob' failed: The string to be decoded is not correctly encoded.");
  for (var n2, o4, a3 = 0, i2 = 0, c = ""; o4 = t3.charAt(i2++); ~o4 && (n2 = a3 % 4 ? 64 * n2 + o4 : o4, a3++ % 4) ? c += String.fromCharCode(255 & n2 >> (-2 * a3 & 6)) : 0)
    o4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o4);
  return c;
};
function t(e2) {
  var t3 = e2.replace(/-/g, "+").replace(/_/g, "/");
  switch (t3.length % 4) {
    case 0:
      break;
    case 2:
      t3 += "==";
      break;
    case 3:
      t3 += "=";
      break;
    default:
      throw "Illegal base64url string!";
  }
  try {
    return function(e3) {
      return decodeURIComponent(r(e3).replace(/(.)/g, function(e4, r2) {
        var t4 = r2.charCodeAt(0).toString(16).toUpperCase();
        return t4.length < 2 && (t4 = "0" + t4), "%" + t4;
      }));
    }(t3);
  } catch (e3) {
    return r(t3);
  }
}
function n(e2) {
  this.message = e2;
}
function o(e2, r2) {
  if ("string" != typeof e2)
    throw new n("Invalid token specified");
  var o4 = true === (r2 = r2 || {}).header ? 0 : 1;
  try {
    return JSON.parse(t(e2.split(".")[o4]));
  } catch (e3) {
    throw new n("Invalid token specified: " + e3.message);
  }
}
n.prototype = new Error(), n.prototype.name = "InvalidTokenError";
var jwt_decode_esm_default = o;

// node_modules/@passageidentity/passage-auth/node_modules/@passageidentity/passage-js/dist/index.js
var g = class {
  encodeBytes(e2) {
    let n2 = btoa(String.fromCharCode(...new Uint8Array(e2))).replace(/\+/g, "-").replace(/\//g, "_");
    return H(n2);
  }
  decodeBytes(e2) {
    let t3 = e2.replace(/-/g, "+").replace(/_/g, "/"), n2 = H(t3);
    return Uint8Array.from(atob(n2), (d) => d.charCodeAt(0));
  }
};
var H = (r2) => {
  let e2 = r2.indexOf("=");
  return r2.slice(0, e2 === -1 ? r2.length : e2);
};
var o2 = class extends Error {
  constructor(t3, n2) {
    super();
    this.name = "PassageError", this.statusCode = n2.status, this.statusText = n2.statusText, this.message = this._parsePsgErrorResponse(t3);
  }
  _parsePsgErrorResponse(t3) {
    try {
      return t3 = JSON.parse(t3), t3.error ? t3.error : "";
    } catch {
      return t3;
    }
  }
};
var _ = ((i2) => (i2[i2.MultipleChoice = 300] = "MultipleChoice", i2[i2.MovedPermanantly = 301] = "MovedPermanantly", i2[i2.Found = 302] = "Found", i2[i2.SeeOther = 303] = "SeeOther", i2[i2.NotModified = 304] = "NotModified", i2[i2.TemporaryRedirect = 307] = "TemporaryRedirect", i2[i2.PermanentRedirect = 308] = "PermanentRedirect", i2[i2.BadRequest = 400] = "BadRequest", i2[i2.Unauthorized = 401] = "Unauthorized", i2[i2.PaymentRequired = 402] = "PaymentRequired", i2[i2.Forbidden = 403] = "Forbidden", i2[i2.NotFound = 404] = "NotFound", i2[i2.MethodNotAllowed = 405] = "MethodNotAllowed", i2[i2.NotAcceptable = 406] = "NotAcceptable", i2[i2.ProxyAuthenticationRequired = 407] = "ProxyAuthenticationRequired", i2[i2.RequestTimeout = 408] = "RequestTimeout", i2[i2.Conflict = 409] = "Conflict", i2[i2.Gone = 410] = "Gone", i2[i2.LengthRequired = 411] = "LengthRequired", i2[i2.PreconditionFailed = 412] = "PreconditionFailed", i2[i2.PayloadTooLarge = 413] = "PayloadTooLarge", i2[i2.URITooLong = 414] = "URITooLong", i2[i2.UnsupportedMediaType = 415] = "UnsupportedMediaType", i2[i2.RangeNotSatisfiable = 416] = "RangeNotSatisfiable", i2[i2.ExpectationFailed = 417] = "ExpectationFailed", i2[i2.MisdirectedRequest = 421] = "MisdirectedRequest", i2[i2.UnprocessableEntity = 422] = "UnprocessableEntity", i2[i2.Locked = 423] = "Locked", i2[i2.FailedDependency = 424] = "FailedDependency", i2[i2.TooEarly = 425] = "TooEarly", i2[i2.UpgradeRequired = 426] = "UpgradeRequired", i2[i2.PreconditionRequired = 428] = "PreconditionRequired", i2[i2.TooManyRequests = 429] = "TooManyRequests", i2[i2.RequestHeaderFieldsTooLarge = 431] = "RequestHeaderFieldsTooLarge", i2[i2.UnavailableForLegalReasons = 451] = "UnavailableForLegalReasons", i2[i2.InternalServerError = 500] = "InternalServerError", i2[i2.NotImplemented = 501] = "NotImplemented", i2[i2.BadGateway = 502] = "BadGateway", i2[i2.ServiceUnavailable = 503] = "ServiceUnavailable", i2[i2.GatewayTimeout = 504] = "GatewayTimeout", i2[i2.HTTPVersionNotSupported = 505] = "HTTPVersionNotSupported", i2[i2.VariantAlsoNegotiates = 506] = "VariantAlsoNegotiates", i2[i2.InsufficientStorage = 507] = "InsufficientStorage", i2[i2.LoopDetected = 508] = "LoopDetected", i2[i2.NotExtended = 510] = "NotExtended", i2[i2.NetworkAuthenticationRequired = 511] = "NetworkAuthenticationRequired", i2[i2.PSGCredObjectDoesNotExist = 700] = "PSGCredObjectDoesNotExist", i2[i2.PSGParsePublicKeyForNewDeviceFailed = 701] = "PSGParsePublicKeyForNewDeviceFailed", i2[i2.PSGParsePublicKeyForLoginFailed = 702] = "PSGParsePublicKeyForLoginFailed", i2[i2.PSGCouldNotGetUserCredential = 703] = "PSGCouldNotGetUserCredential", i2[i2.PSGLoginRequired = 704] = "PSGLoginRequired", i2))(_ || {});
var x = new g();
var B = typeof window > "u";
var N = (r2) => `Failed to access localStorage. ${r2} must be run client-side.`;
var p = class {
  _isLocalHost() {
    return Boolean(window.location.hostname === "localhost" || window.location.hostname === "[::1]" || window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));
  }
  _isHttps() {
    return location.protocol === "https:";
  }
  setAuthToken(e2) {
    localStorage.setItem("psg_auth_token", e2);
    let t3 = !this._isHttps() && this._isLocalHost();
    document.cookie = `psg_auth_token = ${e2}; path=/ ${t3 ? "" : ";secure"}`;
  }
  deleteAuthToken() {
    localStorage.removeItem("psg_auth_token"), document.cookie = "psg_auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC;";
  }
  async psgCredIDExists(e2) {
    let t3 = e2.user.id, n2 = e2.handshake.challenge.publicKey.allowCredentials, s = localStorage.getItem("psg_cred_obj");
    if (!s)
      throw new o2("Could not get psg_cred_obj", { status: 700, statusText: "PSG Cred Object Does Not Exist" });
    let d = JSON.parse(s)[t3];
    return n2.find((S) => {
      if (x.encodeBytes(x.decodeBytes(S.id)) === x.encodeBytes(x.decodeBytes(d)))
        return true;
    });
  }
  setPsgCredID(e2, t3) {
    if (!t3)
      throw new o2("Could not get user's credential", { status: 703, statusText: "PSG Could Not Get User Credential" });
    let n2 = localStorage.getItem("psg_cred_obj");
    if (n2) {
      let s = JSON.parse(n2);
      s[e2] = t3 == null ? void 0 : t3.id, localStorage.setItem("psg_cred_obj", JSON.stringify(s));
    } else
      localStorage.setItem("psg_cred_obj", JSON.stringify({ [e2]: t3 == null ? void 0 : t3.id }));
  }
  setRefreshToken(e2) {
    if (e2) {
      if (B) {
        console.warn(N("setRefreshToken"));
        return;
      }
      localStorage.setItem("psg_refresh_token", e2);
    }
  }
  getRefreshToken() {
    return B ? (console.warn(N("getRefreshToken")), null) : localStorage.getItem("psg_refresh_token");
  }
  deleteRefreshToken() {
    if (B) {
      console.warn(N("deleteRefreshToken"));
      return;
    }
    localStorage.removeItem("psg_refresh_token");
  }
};
var w = class {
  constructor() {
    this.userAgent = new import_ua_parser_js.default();
  }
  async getBrowserInfo() {
    return { createPassKeySupported: await this._canBrowserCreatePassKey(), getPassKeySupported: await this._canBrowserGetPasskey(), conditionalUISupported: await this._isConditionalMediationAvailable() };
  }
  async _canBrowserCreatePassKey() {
    return !!(this._isiOSPasskeySupported() || this._isMacPasskeySupported());
  }
  _canBrowserGetPasskey() {
    return this._canBrowserCreatePassKey();
  }
  async _isConditionalMediationAvailable() {
    return false;
  }
  _isiOSPasskeySupported() {
    return this.userAgent.getOS().name == "iOS" && parseFloat(this.userAgent.getOS().version || "") >= 16;
  }
  _isMacPasskeySupported() {
    return this.userAgent.getBrowser().name == "Safari" && parseFloat(this.userAgent.getBrowser().version || "") >= 16 && this.userAgent.getOS().name == "Mac OS";
  }
  _isChrome107() {
    return this.userAgent.getBrowser().name == "Chrome" && parseFloat(this.userAgent.getBrowser().version || "") >= 107;
  }
};
async function u(r2) {
  return r2.ok ? r2.json() : await r2.text().then((e2) => {
    throw new o2(e2, r2);
  });
}
var j = new p();
var M = (r2) => typeof r2 == "object" && r2 !== null && typeof r2.auth_result < "u";
function y(r2) {
  if (!M(r2))
    return console.warn("Not a valid auth response"), r2;
  let e2 = r2.auth_result.refresh_token;
  return e2 && j.setRefreshToken(e2), r2;
}
function O() {
  let r2 = navigator.userAgent.toLowerCase().indexOf("firefox") > -1, e2 = window.navigator.userAgent.match(/Firefox\/([0-9]+)\./), t3 = e2 ? parseInt(e2[1]) : 0;
  return navigator.platform.indexOf("Win") !== -1 && r2 && t3 === 98;
}
function L(r2) {
  let e2 = new Uint8Array(68);
  e2.set(r2.slice(0, 68));
  let t3 = new Uint8Array(r2.byteLength - 68);
  t3.set(r2.slice(68, r2.byteLength));
  let n2 = new Uint8Array(15), s = new Uint8Array(e2.byteLength + n2.byteLength + t3.byteLength);
  s.set(e2, 0), s.set(n2, e2.byteLength), s.set(t3, e2.byteLength + n2.byteLength);
  let d = s[30] + 15;
  return s.set([d], 30), s;
}
var F = { URL: "https://auth.passage.id", version: "@passageidentity/passage-js 2.6.3" };
var k = F;
function a(r2) {
  let e2 = new Headers(r2), t3 = k.version;
  return t3 && e2.append("Passage-Version", t3), e2;
}
var R = new g();
var $ = new p();
var W = new w();
var A = class {
  constructor(e2, t3) {
    this.apiUrl = e2 + "/register/", this.identifier = t3;
  }
  async withWebAuthn() {
    let { createPassKeySupported: e2 } = await W.getBrowserInfo(), t3 = await fetch(this.apiUrl + "webauthn/start", { headers: a(), body: JSON.stringify({ identifier: this.identifier }), method: "POST" }).then(u), n2 = await navigator.credentials.create({ publicKey: this._parsePublicKey(t3.handshake.challenge.publicKey) }).catch((S) => {
      throw new o2("error parsing public key for webAuthn", { status: 702, statusText: "PSG Parse Public Key For Login Failed" });
    }).then((S) => S), s = new Uint8Array(n2 == null ? void 0 : n2.response.attestationObject);
    O() && (s = L(s));
    let d = t3.user.id, l = await fetch(this.apiUrl + "webauthn/finish", { headers: a(), method: "POST", body: JSON.stringify({ user_id: d, handshake_id: t3.handshake.id, handshake_response: { rawId: R.encodeBytes(n2 == null ? void 0 : n2.rawId), id: n2 == null ? void 0 : n2.id, type: n2 == null ? void 0 : n2.type, response: { attestationObject: R.encodeBytes(s), clientDataJSON: R.encodeBytes(n2 == null ? void 0 : n2.response.clientDataJSON) } }, cred_type: e2 ? "passkey" : "platform" }) }).then(u).then(y);
    return $.setPsgCredID(d, n2), l.auth_result;
  }
  _parsePublicKey(e2) {
    return e2.challenge = R.decodeBytes(e2.challenge.toString()), e2.user.id = R.decodeBytes(e2.user.id.toString()), e2;
  }
};
var T = new g();
var v = class {
  constructor(e2, t3) {
    this.apiUrl = e2 + "/login/", this.identifier = t3 != null ? t3 : "";
  }
  async withWebAuthn() {
    let e2 = JSON.stringify({ identifier: this.identifier }), t3 = this.identifier ? e2 : void 0, n2 = await fetch(this.apiUrl + "webauthn/start", { headers: a(), method: "POST", body: t3 }).then(u), s = await navigator.credentials.get({ publicKey: this._parsePublicKey(n2.handshake.challenge.publicKey) }).catch((l) => {
      throw new o2("error parsing public key for webAuthn", { status: 702, statusText: "PSG Parse Public Key For Login Failed" });
    }).then((l) => l);
    return s ? (await fetch(this.apiUrl + "webauthn/finish", { headers: a(), method: "POST", body: JSON.stringify({ user_id: this.identifier ? n2.user.id : void 0, handshake_id: n2.handshake.id, handshake_response: { id: s.id, rawId: T.encodeBytes(s.rawId), type: s.type, response: { clientDataJSON: T.encodeBytes(s.response.clientDataJSON), authenticatorData: T.encodeBytes(s.response.authenticatorData), signature: T.encodeBytes(s.response.signature), userHandle: T.encodeBytes(s.response.userHandle) } } }) }).then(u).then(y)).auth_result : { auth_token: "", redirect_url: "" };
  }
  _parsePublicKey(e2) {
    if (e2.challenge = Uint8Array.from(atob(e2.challenge.toString()), (t3) => t3.charCodeAt(0)), e2.allowCredentials) {
      for (let t3 = 0; t3 < e2.allowCredentials.length; t3++) {
        let n2 = e2.allowCredentials[t3];
        n2.id = T.decodeBytes(n2.id.toString());
      }
      return e2;
    }
    return e2;
  }
};
var P = class {
  constructor(e2) {
    this.apiUrl = e2;
  }
  async appInfo() {
    return (await fetch(this.apiUrl, { headers: a(), method: "GET" }).then(u)).app;
  }
  async identifierExists(e2) {
    return (await fetch(this.apiUrl + "/users?identifier=" + encodeURIComponent(e2), { headers: a(), method: "GET" }).then(u)).user;
  }
};
var f = new g();
var J = new p();
var m = class {
  constructor(e2) {
    this.apiUrl = e2;
  }
  async newRegister(e2, t3) {
    return (await fetch(this.apiUrl + "/register/magic-link", { headers: a(), method: "POST", body: JSON.stringify({ identifier: e2, magic_link_path: window.location.pathname, language: t3 }) }).then(u)).magic_link;
  }
  async newLogin(e2, t3) {
    return (await fetch(this.apiUrl + "/login/magic-link", { headers: a(), method: "POST", body: JSON.stringify({ identifier: e2, magic_link_path: window.location.pathname, language: t3 }) }).then(u)).magic_link;
  }
  async getStatus(e2) {
    return (await fetch(this.apiUrl + "/magic-link/status", { headers: a(), method: "POST", body: JSON.stringify({ id: e2 }) }).then(u).then(y)).auth_result;
  }
  async activate(e2) {
    return (await fetch(this.apiUrl + "/magic-link/activate", { headers: a(), method: "PATCH", body: JSON.stringify({ magic_link: e2 }) }).then(u).then(y)).auth_result;
  }
  async activateWebAuthnLogin(e2) {
    let t3 = await fetch(this.apiUrl + "/magic-link/webauthn/login/start", { headers: a(), body: JSON.stringify({ magic_link: e2 }), method: "POST" }).then(u);
    if (!await J.psgCredIDExists(t3))
      throw new o2("psg_cred_obj does not exist in the allow list", { status: 700, statusText: "Not Found" });
    let s = await navigator.credentials.get({ publicKey: this._parsePublicKeyLogin(t3.handshake.challenge.publicKey) }).catch((l) => {
      throw new o2("could not parse publickey for login", { status: 702, statusText: "PSG Parse Public Key For Login Failed" });
    });
    return s ? (await fetch(this.apiUrl + "/magic-link/webauthn/login/finish", { headers: a(), method: "POST", body: JSON.stringify({ magic_link: e2, user_id: t3.user.id, handshake_id: t3.handshake.id, handshake_response: { id: s.id, rawId: f.encodeBytes(s.rawId), type: s.type, response: { clientDataJSON: f.encodeBytes(s.response.clientDataJSON), authenticatorData: f.encodeBytes(s.response.authenticatorData), signature: f.encodeBytes(s.response.signature), userHandle: f.encodeBytes(s.response.userHandle) } } }) }).then(u).then(y)).auth_result : { auth_token: "", redirect_url: "" };
  }
  async activateWebAuthnNewDevice(e2) {
    let t3 = await fetch(this.apiUrl + "/magic-link/webauthn/new/start", { headers: a(), body: JSON.stringify({ magic_link: e2 }), method: "POST" }).then(u), n2 = await navigator.credentials.create({ publicKey: this._parsePublicKeyNewDevice(t3.handshake.challenge.publicKey) }).catch((S) => {
      throw new o2("could not parse public key for new device", { status: 701, statusText: "PSG Parse Public Key For New Device Failed" });
    }), s = new Uint8Array(n2 == null ? void 0 : n2.response.attestationObject);
    O() && (s = L(s));
    let d = await fetch(this.apiUrl + "/magic-link/webauthn/new/finish", { headers: a(), method: "POST", body: JSON.stringify({ magic_link: e2, user_id: t3.user.id, handshake_id: t3.handshake.id, handshake_response: { rawId: f.encodeBytes(n2.rawId), id: n2.id, type: n2.type, response: { attestationObject: f.encodeBytes(s), clientDataJSON: f.encodeBytes(n2.response.clientDataJSON) } }, device_name: navigator.userAgent }) }).then(u).then(y), l = t3.user.id;
    return J.setPsgCredID(l, n2), d.auth_result;
  }
  _parsePublicKeyLogin(e2) {
    if (e2.challenge = Uint8Array.from(atob(e2.challenge.toString()), (t3) => t3.charCodeAt(0)), e2.allowCredentials) {
      for (let t3 = 0; t3 < e2.allowCredentials.length; t3++) {
        let n2 = e2.allowCredentials[t3];
        n2.id = f.decodeBytes(n2.id.toString());
      }
      return e2;
    }
    return e2;
  }
  _parsePublicKeyNewDevice(e2) {
    return e2.challenge = f.decodeBytes(e2.challenge.toString()), e2.user.id = f.decodeBytes(e2.user.id.toString()), e2;
  }
};
var U = new g();
var b = new p();
var z = new w();
var I = class {
  constructor(e2) {
    this.userID = "", this._iss = "", this.authToken = e2, this._useLocalStorage = typeof e2 > "u", this.authGuard(), this._apiVersion = "v1";
    try {
      new URL(this._iss), this._appEndpoint = `${this._iss}`;
    } catch {
      this._appEndpoint = `${k.URL}/${this._apiVersion}/apps/${this._iss}`;
    }
    this._currentUserEndpoint = `${this._appEndpoint}/currentuser`;
  }
  _getAuthToken() {
    if (!this._useLocalStorage && this.authToken !== void 0 && this.authToken !== "")
      return this.authToken;
    if (typeof window > "u")
      return console.warn("PassageUser is failed to access localStorage. This function must be run client-side or be provided an authToken JWT."), "";
    let e2 = localStorage.getItem("psg_auth_token");
    return e2 || "";
  }
  _validJWTPayload(e2) {
    let t3 = ["exp", "iss", "sub"], n2 = Math.floor(Date.now() / 1e3);
    return t3.forEach((s) => {
      if (!(s in e2))
        return false;
    }), !(e2.exp && n2 > e2.exp);
  }
  _validJWTHeader(e2) {
    let t3 = { alg: "RS256", typ: "JWT" };
    return !(e2.alg !== t3.alg || e2.typ !== t3.typ);
  }
  authGuard() {
    let e2 = this._getAuthToken();
    try {
      let t3 = jwt_decode_esm_default(e2, { header: true }), n2 = jwt_decode_esm_default(e2);
      return !!(n2 !== void 0 && t3 !== void 0 && (this.userID = n2.sub, this._iss = n2.iss, this._validJWTPayload(n2) && this._validJWTHeader(t3)));
    } catch {
      return false;
    }
  }
  async userInfo() {
    return this.authGuard() ? (await fetch(this._currentUserEndpoint, { method: "GET", headers: a({ Authorization: `Bearer ${this._getAuthToken()}` }) }).then(async (t3) => t3.status !== 200 ? void 0 : await t3.json()).catch((t3) => {
      throw new o2("Failed to fetch current user.", { status: 404, statusText: "Not Found" });
    })).user : void 0;
  }
  async changeEmail(e2, t3) {
    if (!this.authGuard())
      throw new o2("Current user is not authorized.", { status: 401, statusText: "Unauthorized" });
    return (await fetch(`${this._currentUserEndpoint}/email`, { method: "PATCH", headers: a({ Authorization: `Bearer ${this._getAuthToken()}`, "Content-Type": "application/json" }), body: JSON.stringify({ new_email: e2, language: t3 }) }).then(u)).magic_link;
  }
  async changePhone(e2, t3) {
    if (!this.authGuard())
      throw new o2("Current user is not authorized.", { status: 401, statusText: "Unauthorized" });
    return (await fetch(`${this._currentUserEndpoint}/phone`, { method: "PATCH", headers: a({ Authorization: `Bearer ${this._getAuthToken()}`, "Content-Type": "application/json" }), body: JSON.stringify({ new_phone: e2, language: t3 }) }).then(u)).magic_link;
  }
  async editDevice(e2, t3) {
    if (!this.authGuard())
      throw new o2("Current user is not authorized.", { status: 409, statusText: "Conflict" });
    if (e2 === "" || e2 === void 0)
      throw new o2("A deviceID is required for an edit device request.", { status: 400, statusText: "Bad Request" });
    if (Object.keys(t3).length === 0)
      throw new o2("Edit device request must not have an empty request body.", { status: 400, statusText: "Bad Request" });
    return (await fetch(`${this._currentUserEndpoint}/devices/${e2}`, { method: "PATCH", headers: a({ Authorization: `Bearer ${this._getAuthToken()}`, "Content-Type": "application/json" }), body: JSON.stringify({ ...t3 }) }).then(u)).device;
  }
  async listDevices() {
    if (!this.authGuard())
      throw new o2("Current user is not authorized.", { status: 401, statusText: "Unauthorized" });
    return (await fetch(`${this._currentUserEndpoint}/devices/`, { method: "GET", headers: a({ Authorization: `Bearer ${this._getAuthToken()}`, "Content-Type": "application/json" }) }).then(u)).devices;
  }
  async addDevice() {
    if (!this.authGuard())
      throw new o2("Current user is not authorized.", { status: 401, statusText: "Unauthorized" });
    let { createPassKeySupported: e2 } = await z.getBrowserInfo(), t3 = await fetch(this._currentUserEndpoint + "/devices/start", { headers: a({ Authorization: `Bearer ${this._getAuthToken()}` }), method: "POST" }).then(u), n2 = await navigator.credentials.create({ publicKey: this._parsePublicKey(t3.handshake.challenge.publicKey) }).catch((l) => {
      throw new o2("failed to parse public key", { status: 701, statusText: "PSG Parse Public Key For New Device Failed" });
    }).then((l) => l), s = t3.user.id, d = await fetch(this._currentUserEndpoint + "/devices/finish", { headers: a({ Authorization: `Bearer ${this._getAuthToken()}` }), method: "POST", body: JSON.stringify({ user_id: s, handshake_id: t3.handshake.id, handshake_response: { rawId: U.encodeBytes(n2 == null ? void 0 : n2.rawId), id: n2 == null ? void 0 : n2.id, type: n2 == null ? void 0 : n2.type, response: { attestationObject: U.encodeBytes(n2 == null ? void 0 : n2.response.attestationObject), clientDataJSON: U.encodeBytes(n2 == null ? void 0 : n2.response.clientDataJSON) } }, cred_type: e2 ? "passkey" : "platform" }) }).then(u);
    return b.setPsgCredID(s, n2), d.device;
  }
  async deleteDevice(e2) {
    if (!this.authGuard())
      throw new o2("Current user is not authorized.", { status: 401, statusText: "Unauthorized" });
    if (!e2)
      throw new o2("A deviceID is required to delete a device.", { status: 404, statusText: "Not Found" });
    let t3 = false;
    return t3 = await fetch(`${this._currentUserEndpoint}/devices/${e2}`, { method: "DELETE", headers: a({ Authorization: `Bearer ${this._getAuthToken()}`, "Content-Type": "application/json" }) }).then(async (n2) => n2.ok ? true : await n2.text().then((s) => {
      throw new o2(s, n2);
    })), t3;
  }
  _parsePublicKey(e2) {
    return e2.challenge = U.decodeBytes(e2.challenge.toString()), e2.user.id = U.decodeBytes(e2.user.id.toString()), e2;
  }
  async getMetadata() {
    return this.authGuard() ? (await fetch(`${this._currentUserEndpoint}/user-metadata`, { method: "GET", headers: a({ Authorization: `Bearer ${this._getAuthToken()}` }) }).then(u)).user_metadata : void 0;
  }
  async updateMetadata(e2) {
    if (!this.authGuard())
      throw new o2("Current user is not authorized.", { status: 401, statusText: "Unauthorized" });
    return (await fetch(`${this._currentUserEndpoint}/user-metadata`, { method: "PATCH", headers: a({ Authorization: `Bearer ${this._getAuthToken()}`, "Content-Type": "application/json" }), body: JSON.stringify({ user_metadata: e2 }) }).then(u)).user;
  }
  async signOut() {
    b.deleteAuthToken();
    let e2 = b.getRefreshToken();
    return e2 ? fetch(`${this._appEndpoint}/tokens/?` + new URLSearchParams({ refresh_token: e2 }), { method: "DELETE" }).then(({ status: t3 }) => t3 === 200).finally(() => {
      b.deleteRefreshToken();
    }) : true;
  }
  async getAuthToken() {
    let e2 = this._getAuthToken(), t3 = jwt_decode_esm_default(e2);
    return t3 !== void 0 && this._validJWTPayload(t3) ? Promise.resolve(e2) : this.refresh();
  }
  async refresh() {
    let e2 = new o2("Login required", { status: 704, statusText: "Login required" }), t3 = b.getRefreshToken();
    return t3 ? fetch(`${this._appEndpoint}/tokens/`, { headers: a(), method: "POST", body: JSON.stringify({ refresh_token: t3 }) }).then(u).then((n2) => {
      b.setRefreshToken(n2.auth_result.refresh_token);
      let s = n2.auth_result.auth_token;
      return this._useLocalStorage ? b.setAuthToken(s) : this.authToken = s, s;
    }).catch(() => {
      throw e2;
    }) : Promise.reject(e2);
  }
};
var G = async (r2, e2) => {
  let t3, n2 = new Promise((s) => {
    t3 = setTimeout(s, e2);
  });
  return Promise.race([r2, n2]).then((s) => (clearTimeout(t3), s));
};
var q = class {
  constructor(e2) {
    this.appID = e2, this.baseUrl = k.URL, this.apiVersion = "v1", this.fullUrl = `${this.baseUrl}/${this.apiVersion}/apps/${this.appID}`;
  }
  credIDExists(e2) {
    let t3 = localStorage.getItem("psg_cred_obj");
    return t3 ? !!JSON.parse(t3)[e2] : false;
  }
  setAuthToken(e2) {
    new p().setAuthToken(e2);
  }
  signOut() {
    console.warn("Passage.signOut is deprecated and will be removed in a future version. Use User.signOut instead."), new p().deleteAuthToken();
  }
  async register(e2) {
    return await new A(this.fullUrl, e2).withWebAuthn();
  }
  async login(e2) {
    return await new v(this.fullUrl, e2).withWebAuthn();
  }
  async appInfo() {
    return await new P(this.fullUrl).appInfo();
  }
  async browserInfo() {
    return await new w().getBrowserInfo();
  }
  checkWebauthnConfig(e2) {
    let t3 = true;
    return e2.auth_origin.replace(/\/$/, "") != window.location.origin.replace(/\/$/, "") && (console.error('The auth_origin configured for webauthn in your app settings does not match the "origin" of your current URL.  Please reconfigure this in the admin console. (Your current "origin" is `' + window.location.origin + "`) Passage will continue to work with other authentication methods."), t3 = false), t3;
  }
  async isWebauthnSupported(e2) {
    let t3 = false;
    return window.PublicKeyCredential && (e2 ? t3 = true : await G(window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then((n2) => {
      t3 = n2;
    }).catch(() => console.log("Something went wrong.")), 150)), t3;
  }
  async identifierExists(e2) {
    return await new P(this.fullUrl).identifierExists(e2);
  }
  async newRegisterMagicLink(e2, t3) {
    return await new m(this.fullUrl).newRegister(e2, t3);
  }
  async newLoginMagicLink(e2, t3) {
    return await new m(this.fullUrl).newLogin(e2, t3);
  }
  async magicLinkActivate(e2) {
    return await new m(this.fullUrl).activate(e2);
  }
  async magicLinkActivateWebAuthnLogin(e2) {
    return await new m(this.fullUrl).activateWebAuthnLogin(e2);
  }
  async magicLinkActivateWebAuthnNewDevice(e2) {
    return await new m(this.fullUrl).activateWebAuthnNewDevice(e2);
  }
  async getMagicLinkStatus(e2) {
    return await new m(this.fullUrl).getStatus(e2);
  }
  getCurrentUser(e2) {
    return new I(e2);
  }
  async createUser(e2) {
    return (await fetch(`${this.fullUrl}/users`, { headers: a(), body: JSON.stringify({ ...e2 }), method: "POST" }).then(u)).user;
  }
};
var C = ((n2) => (n2.email = "email", n2.phone = "phone", n2.both = "both", n2))(C || {});
var V = ((s) => (s.Phone = "phone", s.Email = "email", s.Both = "both", s.Either = "either", s))(V || {});
var Y = ((l) => (l.STRING = "string", l.BOOLEAN = "boolean", l.INTEGER = "integer", l.DATE = "date", l.PHONE = "phone", l.EMAIL = "email", l))(Y || {});
var Q = ((n2) => (n2.ACTIVE = "active", n2.INACTIVE = "inactive", n2.PENDING = "pending", n2))(Q || {});
var X = ((t3) => (t3.Platform = "platform", t3.Passkey = "passkey", t3))(X || {});

// node_modules/@passageidentity/passage-auth/dist/package/PassageUser/index.mjs
var o3 = (s, e2, r2) => {
  if (!e2.has(s))
    throw TypeError("Cannot " + r2);
};
var t2 = (s, e2, r2) => (o3(s, e2, "read from private field"), r2 ? r2.call(s) : e2.get(s));
var u2 = (s, e2, r2) => {
  if (e2.has(s))
    throw TypeError("Cannot add the same private member more than once");
  e2 instanceof WeakSet ? e2.add(s) : e2.set(s, r2);
};
var i = (s, e2, r2, n2) => (o3(s, e2, "write to private field"), n2 ? n2.call(s, r2) : e2.set(s, r2), r2);
var a2;
var g2 = class {
  constructor(e2) {
    u2(this, a2, void 0);
    i(this, a2, new q("").getCurrentUser(e2));
  }
  authGuard() {
    return t2(this, a2).authGuard();
  }
  async userInfo() {
    return t2(this, a2).userInfo();
  }
};
a2 = /* @__PURE__ */ new WeakMap();
export {
  g2 as PassageUser
};
//# sourceMappingURL=@passageidentity_passage-auth_passage-user.js.map
